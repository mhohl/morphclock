%
% glyph
%
% die Bilder werden in der Form glyph.ffttnn erzeugt:
% f = "from": Startziffer (Position im Alphabet)
% t = "to":   Endziffer
% nn : laufende Nummer
%
% Für die Anzeige des Monats (jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)
% und des Wochentages (mon|tue|wed|thu|fri|sat|sun)
% sind folgende Übergänge notwendig (dahinter die Kodierung):
%
% a -> e 0105
% a -> m 0113
% a -> p ---- schon in digit enthalten
% a -> s 0119
% a -> u 0121
% b -> r 0218
% c -> n 0314
% c -> o 0315
% d -> j 0410
% d -> u 0421
% e -> a 0501
% e -> c 0503
% e -> d 0504
% e -> h 0508
% f -> m 0613
% f -> s 0619
% g -> p 0716
% h -> r 0818
% i -> t 0920
% j -> a 1001
% j -> f 1006
% j -> j 1010
% l -> g 1207
% m -> a 1301
% m -> j 1310
% m -> t 1320
% n -> b 1402
% n -> d 1404
% n -> e 1405
% n -> l 1412
% n -> n 1414
% o -> e 1505
% o -> n 1514
% o -> u 1521
% p -> a ---- schon in digit enthalten
% p -> t 1620
% r -> a 1601
% r -> r 1818
% r -> y 1825
% s -> m 1913
% s -> o 1915
% s -> s 1919
% t -> f 2006
% t -> n 2014
% t -> v 2022
% t -> w 2023
% u -> e 2105
% u -> i 2109
% u -> o 2115
% u -> u 2121
% v -> c 2203
% w -> t 2320
% y -> n 2514


% Versionsnummer:
string version;
version := "Version: 0.01";
show(version);

show("call with '-numbersystem=double' to prevent overflow errors");

outputtemplate := "%j-%c.mps";
outputformat := "eps";

warningcheck := 0; % unterdrückt Fehlermeldungen für i > 4096 bei beginfig(i);

numeric f;      % [f]rame index
numeric fpht;   % [f]rames [p]er [h]alf [t]ransition
fpht := 50;
numeric start;  % [start] of transition;
numeric m;      % [m]orph factor
numeric t;      % [t]ension
numeric tt;     % ano[t]her [t]ension ;-)
numeric phi[];  % rotation angle [phi1]
numeric u;      % [u]nit
u := 5cm;
numeric q;      % [q]adratic factor
pair C;         % [C]enter of rotation
C := (0,0.425u);
pen pc;         % [p]en[c]ircle
pc := pencircle scaled 0.1u;
path tmppath[]; % [t]e[mp]orary [path]
numeric tmp[];  % [t]e[mp]orary variable
pair aux[];     % [aux]iliary points;
picture tmppic; % [t]e[mp]orary [pic]ture

% symbolische Variablen
numeric LEFT, RIGHT, TOP, BOTTOM;
numeric BEGIN, END, JOINT, MID;
numeric L_ARC, R_ARC, U_ARC, D_ARC;
LEFT   = 1000;
RIGHT  = 1001;
TOP    = 1002;
BOTTOM = 1003;
BEGIN  = 1004;
END    = 1005;
JOINT  = 1006;
MID    = 1007;
L_ARC  = 1008; % [l]eft (part of) [arc]
R_ARC  = 1009; % [r]ight (part of) [arc]
U_ARC  = 1010; % [u]pright (part of) [arc]
D_ARC  = 1011; % [d]ownright (part of) [arc]

% Array für die Null
pair zero[];

% Arrays für die Buchstaben:
pair _a_[], _b_[], _c_[], _d_[],
     _e_[], _f_[], _g_[], _h_[],
     _i_[], _j_[], _k_[], _l_[],
     _m_[], _n_[], _o_[], _p_[],
     _q_[], _r_[], _s_[], _t_[],
     _u_[], _v_[], _w_[], _x_[],
     _y_[], _z_[];

% draft kennzeichnet den Entwurfsmodus:
numeric draft; draft := 1;

def draw_grid(expr u) =
    if draft > 0:
      draw (-0.6u,-0.75u) -- (-0.6u,1.5u) -- (0.6u,1.5u) -- (0.6u,-0.75u) -- cycle;
      draw (-0.6u,0) -- (0.6u,0);
      draw (-0.6u,0.85u) -- (0.6u,0.85u);
      draw (-0.25u,-0.75u)--(-0.25u,1.5u);
      draw (0.25u,-0.75u)--(0.25u,1.5u);
    fi
enddef;

path boundingpath;
boundingpath := (-0.6u,-0.75u)
                -- (-0.6u,1.5u)
                -- (0.6u,1.5u)
                -- (0.6u,-0.75u)
                -- cycle;

vardef advanced(expr xx) = sind(90xx) enddef;
vardef retarded(expr xx) = 1-cosd(90xx) enddef;

% Die Exponentialfunktion ist standardmäßig nicht definiert: 
vardef exp(expr xx) = (mexp(256)**xx) enddef;

% Wir definieren ein "yshifted" für den Buchstaben "m":
primarydef z yshifted yy = z shifted (0,yy) enddef;

% eine Funktion zur Berechnung des Startwertes gemäß ffttnn:
vardef transition(expr from, to) =
    save i;
    i := (ASCII(from)-96)*10000+(ASCII(to)-96)*100;
    i
enddef;

% einige Glyphen verwenden wir nur "standalone":
vardef standalone(expr glyph) = 
    save i;
    i := (ASCII(glyph)-96)*10000;
    i
enddef;

show standalone("k");

%
% Null
%
zero[TOP]    = (0,0.85u);
zero[BOTTOM] = (0,0);
zero[LEFT]   = (-0.25u,0.425u);
zero[RIGHT]  = zero[LEFT] xscaled -1;

%
%%%%%%%%%% Definition der Buchstaben
%

% a
_a_[BEGIN]  = (-0.25u,0.6u);
_a_[TOP]    = zero[TOP];
_a_[R_ARC]  = _a_[BEGIN] xscaled -1;
_a_[JOINT]  = (0.25u,0.15u);
_a_[END]    = (0.325u,0);
_a_[L_ARC]  = _a_[JOINT] xscaled -1;
_a_[BOTTOM] = zero[BOTTOM];

% b
_b_[BEGIN]  = _p_[BEGIN] shifted (0,0.5u);
_b_[END]    = _p_[END] shifted (0,0.65u);
_b_[U_ARC]  = _p_[U_ARC];
_b_[D_ARC]  = _p_[D_ARC];
_b_[TOP]    = _p_[TOP];
_b_[BOTTOM] = _p_[BOTTOM];
_b_[RIGHT]  = _p_[RIGHT];

% c
% kopiert von Sechs
_c_[LEFT]   = zero[LEFT] xscaled 3/2;
_c_[RIGHT]  = zero[RIGHT] xscaled 3/2;
_c_[TOP]    = zero[TOP];
_c_[BOTTOM] = zero[BOTTOM];
% Schnittpunkt zwischen o-Bogen und einer Halbgeraden
_c_[BEGIN] = (_c_[RIGHT]{up} .. _c_[TOP]{left})
             intersectionpoint 
             (((0,0) -- (infinity,0)) rotated 35 shifted C);
_c_[END]   = (_c_[RIGHT]{down} .. _c_[BOTTOM]{left})
             intersectionpoint 
             (((0,0) -- (infinity,0)) rotated -35 shifted C);

% d
_d_[BEGIN]  = _b_[BEGIN] xscaled -1;
_d_[END]    = _b_[END] xscaled -1;
_d_[U_ARC]  = _b_[U_ARC] xscaled -1;
_d_[D_ARC]  = _b_[D_ARC] xscaled -1;
_d_[TOP]    = _b_[TOP] xscaled -1;
_d_[BOTTOM] = _b_[BOTTOM] xscaled -1;
_d_[LEFT]  = _b_[RIGHT] xscaled -1;

% e
_e_[LEFT]   = _c_[LEFT];
_e_[RIGHT]  = _c_[RIGHT];
_e_[TOP]    = _c_[TOP];
_e_[BOTTOM] = _c_[BOTTOM];
_e_[END]    = _c_[END];

% f
_f_[BEGIN]  = (-0.15u,0);
_f_[MID]    = (-0.15u,1.2u);
_f_[TOP]    = (0, 1.35u);
_f_[END]    = _f_[TOP] rotatedaround
              ((xpart(_f_[TOP]),ypart(_f_[MID])),-45);

_f_[LEFT]   = (-0.25u,0.85u);
_f_[RIGHT]  = (-0.05u,0.85u);

% g
_g_[TOP]    = (0,0.85u);
_g_[LEFT]   = (-0.325u,0.5u);
% 0.15u höher als Nulllinie, daher ist die Mitte bei
% 0.15u+1/2(0.85u-0.15u) = 0.5u
_g_[RIGHT]  = (0.325u,0.5u);
_g_[BOTTOM] = (0,0.15u);

_g_[BEGIN]  = (0.25u,0.85u); % "Schwänzchen" oben rechts

% _g_[JOINT] wird später definiert
_g_[U_ARC]  = (-0.15u,-0.1u);
_g_[L_ARC]  = (-0.375u,-0.25u);
_g_[R_ARC]  = (0.375u,-0.25u);
_g_[D_ARC]  = (0,-0.55u);
_g_[END]    = (0.15u,-0.1u);

% h
tmp0 := 0.25;
tmp1 := 0.85;
_h_[BEGIN] = (-tmp0*u,1.35u);
_h_[LEFT]  = (-tmp0*u,3/4*tmp1*u);
_h_[BOTTOM] = (-tmp0*u,0);
_h_[MID]   = (0,tmp1*u);
_h_[RIGHT] = _h_[LEFT] xscaled -1;
_h_[END]   = _h_[BOTTOM] xscaled -1;

% i
_i_[TOP]    = (0,0.85u);
_i_[BEGIN]  = (0,0.6u);
_i_[END]    = (0,0);

% j
_j_[TOP]    = (0.15u, 0.85u);
_j_[BEGIN]  = (0.15u,0.6u);
_j_[MID]    = (0.15u,-0.5u);
_j_[BOTTOM] = (0,-0.65u);
_j_[END]    = _j_[BOTTOM] rotatedaround
              ((xpart(_j_[BOTTOM]),ypart(_j_[MID])),-45);

% k
_k_[BEGIN]  = (-0.25u,1.35u);
_k_[END]    = (-0.25u,0);
_k_[MID]    = (-0.25u,0.425u);
_k_[TOP]    = (0.25u,0.85u);
_k_[BOTTOM] = (0.25u,0);

% l
_l_[BEGIN]  = (-0.15u,1.35u);
_l_[MID]    = (-0.15u,0.15u);
_l_[BOTTOM] = (0,0);
_l_[END]    = _l_[BOTTOM] rotatedaround
              ((xpart(_l_[BOTTOM]),ypart(_l_[MID])),45);

% m
tmp0 := 0.375;
tmp1 := 0.85;
_m_[BEGIN] = (-tmp0*u,tmp1*u);
_m_[LEFT]  = (-tmp0*u,3/4*tmp1*u);
_m_[BOTTOM] = (-tmp0*u,0);
_m_[L_ARC] = (-.5tmp0*u,tmp1*u);
_m_[JOINT] = (0,0.65u);
_m_[MID]   = (0,0);
_m_[R_ARC] = _m_[L_ARC] xscaled -1;
_m_[RIGHT] = _m_[LEFT] xscaled -1;
_m_[END]   = _m_[BOTTOM] xscaled -1;

% n
tmp0 := 0.25;
tmp1 := 0.85;
_n_[BEGIN] = (-tmp0*u,tmp1*u);
_n_[LEFT]  = (-tmp0*u,3/4*tmp1*u);
_n_[BOTTOM] = (-tmp0*u,0);
_n_[MID]   = (0,tmp1*u);
_n_[RIGHT] = _n_[LEFT] xscaled -1;
_n_[END]   = _n_[BOTTOM] xscaled -1;

% o
_o_[LEFT]   = _c_[LEFT];
_o_[RIGHT]  = _c_[RIGHT];
_o_[TOP]    = _c_[TOP];
_o_[BOTTOM] = _c_[BOTTOM];

% p
_p_[BEGIN]  = (-0.325u,0.85u);
_p_[END]    = (-0.325u,-0.65u);
_p_[U_ARC]  = (-0.325u,0.6u); % [u]pper end of [arc]
_p_[D_ARC]  = (-0.325u,0.15u);
_p_[TOP]    = zero[TOP];
_p_[BOTTOM] = zero[BOTTOM];
_p_[RIGHT]  = (0.325u,0.425u);

% q
_q_[BEGIN]  = _p_[BEGIN] xscaled -1;
_q_[END]    = _p_[END] xscaled -1;
_q_[U_ARC]  = _p_[U_ARC] xscaled -1;
_q_[D_ARC]  = _p_[D_ARC] xscaled -1;
_q_[TOP]    = zero[TOP];
_q_[BOTTOM] = zero[BOTTOM];
_q_[LEFT]   = _p_[RIGHT] xscaled -1;

% r
_r_[BEGIN]  = (-0.15u,0.85u);
_r_[BOTTOM] = (-0.15u,0);
_r_[MID]    = (-0.15u,0.6u);
_r_[TOP]    = (0,0.85u);
_r_[END]    = _r_[TOP] rotatedaround
              ((xpart(_r_[TOP]),ypart(_r_[MID])),-45);

% s
_s_[BEGIN]  = (0.25u,0.6375u);
_s_[TOP]    = _o_[TOP];
_s_[U_ARC]  = _s_[BEGIN] xscaled -1;
_s_[MID]    = C;
_s_[D_ARC]  = (0.3u,0.2125u);
_s_[BOTTOM] = _o_[BOTTOM];
_s_[END]    = (-0.3u,0.2125u);

% t
_t_[LEFT]   = _f_[LEFT];
_t_[RIGHT]  = _f_[RIGHT]; 

_t_[BEGIN]  = _l_[BEGIN];
_t_[MID]    = _l_[MID];
_t_[BOTTOM] = _l_[BOTTOM];
_t_[END]    = _l_[END];

% u
_u_[BOTTOM] = _n_[BEGIN]  rotatedaround(C,180);
_u_[RIGHT]  = _n_[LEFT]   rotatedaround(C,180);
_u_[BEGIN]  = _n_[END]    rotatedaround(C,180);
_u_[MID]    = _n_[MID]    rotatedaround(C,180);
_u_[LEFT]   = _n_[RIGHT]  rotatedaround(C,180);
_u_[END]    = _n_[BOTTOM] rotatedaround(C,180);

% v
_v_[LEFT] = (-0.25u,0.85u);
_v_[BOTTOM] = (0,0);
_v_[RIGHT] = _v_[LEFT] xscaled -1;

% w
tmp0 := 0.375;
tmp1 := 0.85;
_w_[BEGIN] = _m_[BEGIN];
_w_[LEFT]  = (1/2*xpart(_w_[BEGIN]),0);
_w_[MID]   = (0,0.85u);
_w_[RIGHT] = _w_[LEFT] xscaled -1;
_w_[END] = _w_[BEGIN] xscaled -1;

% x
_x_[LEFT]  = (-0.25u,0.85u);
_x_[RIGHT] = _x_[LEFT] xscaled -1;
_x_[BEGIN] = (-0.25u,0);
_x_[END]   = _x_[BEGIN] xscaled -1 ;

% y
_y_[BOTTOM] = _u_[BOTTOM];
_y_[D_ARC] = (-0.25u,-0.65u);
_y_[RIGHT]  = _u_[RIGHT];
_y_[BEGIN] = _u_[BEGIN];
_y_[MID] = _u_[MID];
_y_[LEFT] = _u_[LEFT];
_y_[END] = _u_[END];

% z
_z_[BEGIN] = _x_[LEFT];
_z_[U_ARC] = _x_[RIGHT];
_z_[D_ARC] = _x_[BEGIN];
_z_[END]   = _x_[END];

%
%%%%%%%%%%%% Definition der Übergänge:
%

%
% a -> e
%
start := transition("a","e");

tmppath1 := _a_[BEGIN]
            ..  _a_[TOP]
            ..  _a_[R_ARC]
            --- _a_[JOINT]
            .. _a_[END];
aux0 := direction 2 of tmppath1;
phi[R_ARC] := angle(aux0);

tmppath2 := _a_[R_ARC]{dir phi[R_ARC]}
            .. _a_[L_ARC]
            .. _a_[BOTTOM]
            .. _a_[JOINT];
% Der Schnitpunkt von a-"Bauch" und y-Achse wird
% beim Übergang p -> a benötigt:
_a_[MID] := tmppath2 intersectionpoint ((0,0.01u)--(0,infinity));
   
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw tmppath1;
   draw tmppath2;
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% a -> m
%

start := transition("a","m");

beginfig(start);
   draw tmppic;
endfig;

%
% a -> s
%

start := transition("a","s");

beginfig(start);
   draw tmppic;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw subpath (0,4-2m) of tmppath1;
       draw tmppath2;
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

% der Winkel am a-"Bauch":
aux1 := direction 1 of tmppath2;
phi[L_ARC] := angle(aux1);
% der Winkel am "Joint":
aux2 := direction 3 of tmppath2;
phi[JOINT] := angle(aux2);

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       % Hilfspfad; wir benötigen den Winkel beim Punkt _a_[JOINT], 
       tmppath3 := m[_a_[L_ARC],_s_[END]]{dir m[phi[L_ARC],-90]}
                   .. _a_[BOTTOM]
                   .. m[_a_[JOINT],_s_[D_ARC]]
                   .. _s_[MID]
                   .. _s_[U_ARC]{up};
       % dieser Winkel soll 90 = up nicht überschreiten:
       phi[JOINT] := min(angle(direction 2 of tmppath3),90);

       % Der komplette Pfad, bestehend aus dem Rest von a und einem vollständigen s:
       tmppath4 := m[_a_[BEGIN],_s_[U_ARC]]
                   .. _a_[TOP]
                   .. _a_[R_ARC]{dir phi[R_ARC]}
                   .. m[_a_[L_ARC],_s_[END]]{dir m[phi[L_ARC],-90]}
                      % Übergang vom ursprünglichen Winkel zu -90 = down
                   .. _a_[BOTTOM]
                   .. m[_a_[JOINT],_s_[D_ARC]]{dir phi[JOINT]}
                   .. _s_[MID]
                   .. _s_[U_ARC]{up}
                   .. _s_[TOP]
                   .. _s_[BEGIN]{down};

       draw subpath (3m,5+4m) of tmppath4;         
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor


%
% a -> u
%

start := transition("a","u");

beginfig(start);
   draw tmppic;
endfig;

%
% b -> r
%

start := transition("b","r");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _b_[BEGIN] -- _b_[END];
   draw _b_[U_ARC]
        .. _b_[TOP]
        .. _b_[RIGHT]
        .. _b_[BOTTOM]
        .. _b_[D_ARC];
   setbounds currentpicture to boundingpath;
endfig;

%
% c -> n
%

start := transition("c","n");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _c_[BEGIN]
        .. _c_[TOP]
        .. _c_[LEFT]
        .. _c_[BOTTOM]
        .. _c_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;
% c -> o




%
% c -> o
%

start := transition("c","o");

beginfig(start);
   draw tmppic;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       aux[BEGIN] := (_c_[BOTTOM]{right} .. _c_[RIGHT]{up} .. _c_[TOP]{left})
              intersectionpoint 
              (((0,0) -- (infinity,0)) rotated (35-90m) shifted C);
       aux[END]   := (_c_[RIGHT]{down} .. _c_[BOTTOM]{left} .. _c_[LEFT]{up})
              intersectionpoint 
              (((0,0) -- (infinity,0)) rotated (-35-90m) shifted C);

       draw aux[END]
            if (-35-90m > -90): .. _c_[BOTTOM]{left} fi
            .. _c_[LEFT]{up}
            .. _c_[TOP]{right}
            if (35-90m < 0): .. _c_[RIGHT]{down} fi
            .. aux[BEGIN];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       tmppath0 := _c_[BOTTOM] .. _c_[LEFT] .. _c_[TOP] .. _c_[RIGHT] .. cycle;
  
       % Wir wollen unten eine abgerundete Kurve, daher funktioniert der oben
       % stehende Ansatz hier nicht.
       draw tmppath0 cutafter  (((0,0) -- (infinity,0)) rotated  (35*(1-m)-90) shifted C)
                     cutbefore (((0,0) -- (infinity,0)) rotated (-35*(1-m)-90) shifted C);
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% d -> j
%

start := transition("d","j");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _d_[BEGIN] -- _d_[END];
   draw _d_[U_ARC]
        .. _d_[TOP]
        .. _d_[LEFT]
        .. _d_[BOTTOM]
        .. _d_[D_ARC];
   setbounds currentpicture to boundingpath;
endfig;

%
% d -> u
%

start := transition("d","u");

beginfig(start);
   draw tmppic;
endfig;

%
% e -> a
%

start := transition("e","a");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _e_[LEFT]
        -- _e_[RIGHT]{up}
        .. _e_[TOP]
        .. _e_[LEFT]
        .. _e_[BOTTOM]
        .. _e_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       aux[END] := (m[_e_[RIGHT],zero[RIGHT]]{down} .. _e_[BOTTOM]{left})
                   intersectionpoint 
                   (((0,0) -- (infinity,0)) rotated -35 shifted C);
       
       tmppath0 := m[_e_[LEFT],zero[LEFT]]
                   -- m[_e_[RIGHT],zero[RIGHT]]{up}
                   .. _e_[TOP]
                   .. m[_e_[LEFT],zero[LEFT]]
                   .. _e_[BOTTOM]
                   .. aux[END];
       
       draw tmppath0 rotatedaround (C,180m);
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       %TODO

       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% e -> c
%

start := transition("e","c");

beginfig(start);
   draw tmppic;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[_e_[LEFT],_e_[RIGHT]]
        -- _e_[RIGHT]{up}
        .. _e_[TOP]
        .. _e_[LEFT]
        .. _e_[BOTTOM]
        .. _e_[END];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       tmppath0 := _e_[RIGHT]{up}
                   .. _c_[BEGIN]
                   .. _e_[TOP]
                   .. _e_[LEFT]
                   .. _e_[BOTTOM]
                   .. _e_[END];
                   
       draw subpath (m,5) of tmppath0;

       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% e -> d
%

start := transition("e","d");

beginfig(start);
   draw tmppic;
endfig;

%
% e -> h
%

start := transition("e","h");

beginfig(start);
   draw tmppic;
endfig;

%
% f -> m
%

start := transition("f","m");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _f_[LEFT] -- _f_[RIGHT];

   tmppath0 :=  _f_[BEGIN]
                -- _f_[MID]{up}
                .. _f_[TOP]
                .. _f_[END];
   % Wir brauchen den Winkel an der Spitze für den Übergang f -> s
   phi[BEGIN] := angle(direction 0 of tmppath0); 
   
   draw tmppath0;
   
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;



%
% f -> s
%

start := transition("f","s");

beginfig(start);
   draw tmppic;
endfig;

% Wir schieben das f in die Mitte und stauchen es
aux[LEFT]  := C shifted (-0.1u,0); % halbe Breite des f-Strichs: 0.1u
aux[RIGHT] := C shifted(0.1u,0);

aux[END]   := _f_[END] shifted (0.15u,-0.5u); % 1.35u (f-Höhe)-0.85u (s-Höhe)
aux[TOP]   := _f_[TOP] shifted (0.15u,-0.5u);
aux[MID]   := _f_[MID] shifted (0.15u,-0.5u);
aux[BEGIN] := _f_[BEGIN] shifted (0.15u,0);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[_f_[LEFT],aux[LEFT]]
            -- m[_f_[RIGHT],aux[RIGHT]];

       draw m[_f_[BEGIN],aux[BEGIN]]
            -- m[_f_[MID],aux[MID]]{up}
            .. m[_f_[TOP],aux[TOP]]
            .. m[_f_[END],aux[END]];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

aux[D_ARC] := 1/2[_s_[MID],_s_[BOTTOM]];

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       
       t := 1/sqrt(m);
       
       draw m[aux[LEFT],C]
            -- m[aux[RIGHT],C];

       draw m[aux[END],_s_[BEGIN]]{dir (m*m)[phi[BEGIN],90]}
            .. m[aux[TOP],_s_[TOP]]
            .. (m*m)[aux[MID],_s_[U_ARC]]{down}
            %.. tension t
            .. _s_[MID]
            %.. tension t
            .. (m*m)[aux[D_ARC],_s_[D_ARC]]{down}
            .. tension t
            .. _s_[BOTTOM]
            .. (1*m)[aux[BEGIN],_s_[END]]{up};
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor


%
% g
%

%
% g -> p
%

start := transition("g","p");

beginfig(start);
   draw_grid(u);
   pickup pc;
   
   draw _g_[BEGIN] -- _g_[TOP];
   
   tmppath0 := _g_[TOP]
               .. _g_[LEFT]
               .. _g_[BOTTOM]
               .. _g_[RIGHT]
               .. cycle;
   aux[MID] := (0,0.5[ypart(_g_[TOP]),ypart(_g_[BOTTOM])]);
   tmppath1 := (aux[MID] -- (0,infinity)) rotatedaround (aux[MID],135);
   
   _g_[JOINT] := tmppath0 intersectionpoint tmppath1;
   (tmp[JOINT], whatever) = tmppath0 intersectiontimes tmppath1;
   phi[JOINT] := angle(direction tmp[JOINT] of tmppath0);
    
   draw tmppath0;
   
   draw _g_[JOINT]{dir phi[JOINT]}
        .. _g_[U_ARC]
        .. _g_[L_ARC]
        .. _g_[D_ARC]
        .. _g_[R_ARC]
        .. _g_[END];

   setbounds currentpicture to boundingpath;
endfig;

% Wir ziehen die beiden Bogenpunkte zur Senkrechten durch _g_[LEFT]:
aux[U_ARC] := (xpart(_g_[LEFT]),ypart(_g_[U_ARC]));
aux[L_ARC] := (xpart(_g_[LEFT]),ypart(_g_[L_ARC]));
% Der untere Teil des Bogens wandert nach unten:
aux[D_ARC] := (xpart(_g_[D_ARC]),ypart(_p_[END]));

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw _g_[BEGIN] -- _g_[TOP];
   
       % Der Schnittpunkt _g_[JOINT] wandert an der Rundung entlang Richtung _g_[LEFT]
       % und ist am Ende deckungsgleich:
       tmppath1 := (aux[MID] -- (0,infinity)) rotatedaround (aux[MID],m[135,90]);
   
       _g_[JOINT] := tmppath0 intersectionpoint tmppath1;
       tmp[JOINT] := xpart(tmppath0 intersectiontimes tmppath1);
       phi[JOINT] := angle(direction tmp[JOINT] of tmppath0);
    
       draw tmppath0;
   
       draw _g_[JOINT]{dir phi[JOINT]}
            .. m[_g_[U_ARC],aux[U_ARC]]
            .. m[_g_[L_ARC],aux[L_ARC]]
            .. _g_[D_ARC]
            .. _g_[R_ARC]
            .. _g_[END];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

% Die Hilfspunkte aux[U_ARC] und aux[L_ARC] wandern zur finalen x-Koordinate:
aux[TOP] := (xpart(_p_[END]),ypart(aux[U_ARC]));
aux[MID] := (xpart(_p_[END]),ypart(aux[D_ARC]));


for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       tmppath0 := m[_g_[LEFT],_p_[U_ARC]]
                   .. m[_g_[TOP],_p_[TOP]]
                   .. m[_g_[RIGHT],_p_[RIGHT]]
                   .. m[_g_[BOTTOM],_p_[BOTTOM]]
                   .. m[_g_[LEFT],_p_[D_ARC]];
                   
       tmp0 := xpart(_g_[BEGIN])-xpart(_g_[TOP]);
       tmp1 := ypart(_p_[BEGIN])-ypart(_p_[U_ARC]);
       
       tmppath1 := (0,0)--(m[tmp0,tmp1],0);
       
       draw tmppath1 rotatedabout ((0,0),90*m) shifted point 1-m of tmppath0;
       
       tmppath2 := m[_g_[LEFT],_p_[U_ARC]]
                   -- m[_g_[LEFT],_p_[D_ARC]]
                   .. m[aux[U_ARC],aux[TOP]]
                   .. m[aux[L_ARC],aux[MID]]{down}
                   .. m[_g_[D_ARC],_p_[END]]
                   .. m[_g_[R_ARC],_g_[D_ARC]]
                   .. m[_g_[END],_g_[R_ARC]];
        
       draw tmppath0;            
       draw subpath (0,6-2m) of tmppath2;
      
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% h -> r
%

start := transition("h","r");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _h_[BEGIN] -- _h_[LEFT];
   draw _h_[BOTTOM]
        -- _h_[LEFT]
        .. _h_[MID]
        .. _h_[RIGHT]
        -- _h_[END];
   setbounds currentpicture to boundingpath;
endfig;

%
% i -> t
%

start := transition("i","t");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _i_[TOP];
   draw _i_[BEGIN]
        -- _i_[END];
   setbounds currentpicture to boundingpath;
endfig;

aux[MID]    := (0,0.15u);
aux[BOTTOM] := _t_[BOTTOM] shifted (0.15u,0);
aux[END]    := _t_[END] shifted (0.15u,0);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw _i_[TOP];
       draw _i_[BEGIN]
            -- m[_i_[END],aux[MID]]{down}
            .. m[_i_[END],aux[BOTTOM]]
            .. m[_i_[END],aux[END]];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       draw m[_i_[TOP],_t_[LEFT]]
            -- m[_i_[TOP],_t_[RIGHT]];
       draw m[_i_[BEGIN],_t_[BEGIN]]
            -- m[aux[MID],_t_[MID]]{down}
            .. m[aux[BOTTOM],_t_[BOTTOM]]
            .. m[aux[END],_t_[END]];

       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% j -> a
%

start := transition("j","a");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _j_[TOP];
   draw _j_[BEGIN]
        -- _j_[MID]
        .. _j_[BOTTOM]
        .. _j_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% j -> f
%

start := transition("j","f");

beginfig(start);
   draw tmppic;
endfig;

% Der j-Bogen wandert weiter in den f-Bogen hinein
% der Hilfspunkt aux[JOINT] verbindet j und f

aux[JOINT] := (xpart(_f_[BEGIN]),ypart(_j_[MID]));

tmppath0 := _j_[BEGIN]
            -- _j_[MID]{down}
            .. _j_[BOTTOM]
            .. _j_[END]
            .. aux[JOINT]
            -- _f_[BEGIN]
            -- _f_[MID]{up}
            .. _f_[TOP]
            .. _f_[END];

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw _j_[TOP];
                     
       draw subpath (0,5m+4) of tmppath0;
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       draw m[_j_[TOP],_f_[LEFT]]
            -- m[_j_[TOP],_f_[RIGHT]];
            
       draw subpath (5m,8) of tmppath0;

       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% j -> j
%

start := transition("j","j");

beginfig(start);
   draw tmppic;
endfig;

%
% k -> ()
%

beginfig(standalone("k"));
   draw_grid(u);
   pickup pc;

   draw _k_[BEGIN]
        -- _k_[END];
        
   draw _k_[TOP]
        -- _k_[MID]
        -- 4/3[_k_[MID],_k_[BOTTOM]];
   setbounds currentpicture to boundingpath;
endfig;

%
% l - > g
%

start := transition("l","g");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _l_[BEGIN]
        -- _l_[MID]{down}
        .. _l_[BOTTOM]
        .. _l_[END];
   setbounds currentpicture to boundingpath;
endfig;

%
% m -> a
% 

start := transition("m","a");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _m_[BEGIN] -- _m_[LEFT];
   draw _m_[BOTTOM]
        -- _m_[LEFT]{up}
        .. _m_[L_ARC]
        .. _m_[JOINT]{down}
     &  _m_[JOINT]{up}
        .. _m_[R_ARC]
        .. _m_[RIGHT]{down}
        -- _m_[END];
   draw _m_[MID] -- _m_[JOINT];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% m -> j
%

start := transition("m","j");

beginfig(start);
   draw tmppic;
endfig;

%
% m -> t
%

start := transition("m","t");

beginfig(start);
   draw tmppic;
endfig;

%
% n -> b
%

start := transition("n","b");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _n_[BEGIN] -- _n_[LEFT];
   draw _n_[BOTTOM]
        -- _n_[LEFT]
        .. _n_[MID]
        .. _n_[RIGHT]
        --_n_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[_n_[BEGIN],_b_[BEGIN]] 
            .. _n_[LEFT]
            .. m[_n_[BOTTOM],_b_[END]];
       draw _n_[LEFT]
            .. _n_[MID]
            .. _n_[RIGHT]
            --_n_[END];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 2-m;

       draw _b_[BEGIN] 
            .. m[_n_[LEFT],_b_[U_ARC]]
            .. _b_[END];

       draw m[_n_[LEFT],_b_[U_ARC]]
           .. m[_n_[MID],_b_[TOP]]
           .. m[_n_[RIGHT],_b_[RIGHT]]
           .. tension t .. m[_n_[END],_b_[RIGHT]]{down}
           .. m[_n_[END],_b_[BOTTOM]]
           .. m[_n_[END],_b_[D_ARC]];

       setbounds currentpicture to boundingpath;
    endfig;
endfor


%
% n -> d
%

start := transition("n","d");

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[_n_[BEGIN],_n_[LEFT]] 
            -- _n_[LEFT];
        
       draw _n_[BOTTOM]
            -- _n_[LEFT]
            .. _n_[MID]
            .. _n_[RIGHT]
            -- _n_[END];
            
       draw (xpart(_n_[RIGHT]),m[ypart(_n_[RIGHT]),ypart(_d_[BEGIN])])
            -- _n_[RIGHT];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 2-m;

       

       setbounds currentpicture to boundingpath;
    endfig;
endfor

% TODO: der Stiel schrumpft und wächst gleichzeitig rechts nach oben (gespiegeltes h),
% dann klappt der Bogen um.

%
% n -> e
%

start := transition("n","e");

beginfig(start);
   draw tmppic;
endfig;

%
% n -> l
%

start := transition("n","l");

beginfig(start);
   draw tmppic;
endfig;

%
% n -> n
%

start := transition("n","n");

beginfig(start);
   draw tmppic;
endfig;

%
% o -> e
%

start := transition("o","e");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _o_[TOP]
        .. _o_[RIGHT]
        .. _o_[BOTTOM]
        .. _o_[LEFT]
        .. cycle;
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw _o_[TOP]
            .. _o_[RIGHT]
            .. _o_[BOTTOM]
            .. _o_[LEFT]
            .. cycle;
            
       draw _o_[RIGHT]
            -- m[_o_[RIGHT],_o_[LEFT]];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       draw _e_[LEFT]
            -- _e_[RIGHT]{up}
            .. _e_[TOP]
            .. _e_[LEFT]
            .. _e_[BOTTOM]
            .. m[_e_[RIGHT],_e_[END]];

       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% o -> n
%

start := transition("o","n");

beginfig(start);
   draw tmppic;
endfig;

%
% o -> u
%

start := transition("o","u");

beginfig(start);
   draw tmppic;
endfig;

%
% p -> t
%

start := transition("p","t");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _p_[BEGIN] -- _p_[END];
   draw _p_[U_ARC]
        .. _p_[TOP]
        .. _p_[RIGHT]
        .. _p_[BOTTOM]
        .. _p_[D_ARC];
   setbounds currentpicture to boundingpath;
endfig;

% Der Beginn des t-Bogens
aux[MID]    := _p_[END] shifted (0,0.15u);
aux[BOTTOM] := _p_[END] shifted (0.15u,0);
aux[END]    := aux[BOTTOM] rotatedabout ((xpart(aux[BOTTOM]),ypart(aux[MID])),45);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       % Der Bogen bildet sich zuerst nur bis zur Vierteldrehung aus
       draw _p_[BEGIN]
       -- aux[MID]{down}
       .. m[_p_[END],aux[BOTTOM]];
       
       draw _p_[U_ARC]
            .. _p_[TOP]
            .. _p_[RIGHT]
            .. _p_[BOTTOM]
            .. _p_[D_ARC];
             
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       tmppath0 := m[_p_[BEGIN],_t_[BEGIN]]
                   -- m[aux[MID],_t_[MID]]{down}
                   .. m[aux[BOTTOM],_t_[BOTTOM]]
                   .. m[aux[END],_t_[END]];
                   
       tmppath1 := m[_p_[U_ARC],_t_[LEFT]]
                   .. m[_p_[TOP],_t_[RIGHT]]{right}
                   .. _p_[RIGHT]
                   .. _p_[BOTTOM]
                   .. _p_[D_ARC];

       draw subpath (0,2+m) of tmppath0;
       draw subpath (0,4-3m) of tmppath1;

       setbounds currentpicture to boundingpath;
    endfig;
endfor



%
% q -> ()
%

beginfig(standalone("q"));
   draw_grid(u);
   pickup pc;

   draw _q_[BEGIN] -- _q_[END];
   draw _q_[U_ARC]
        .. _q_[TOP]
        .. _q_[LEFT]
        .. _q_[BOTTOM]
        .. _q_[D_ARC];
   setbounds currentpicture to boundingpath;
endfig;

%
% r -> a
%

start := transition("r","a");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _r_[BEGIN] -- _r_[BOTTOM];
   draw _r_[MID]{up}
        .. _r_[TOP]
        .. _r_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% r -> r 
%

start := transition("r","r");

beginfig(start);
   draw tmppic;
endfig;

%
% r -> t
%

start := transition("r","t");

beginfig(start);
   draw tmppic;
endfig;

%
% s -> m
%

start := transition("s","m");
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _s_[BEGIN]{up}
        .. _s_[TOP]
        .. _s_[U_ARC]{down}
        .. _s_[MID]
        .. _s_[D_ARC]{down}
        .. _s_[BOTTOM]
        .. _s_[END]{up};
   
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% s -> o
%

start := transition("s","o");

beginfig(start);
   draw tmppic;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[_s_[BEGIN],_o_[RIGHT]]{up}
            .. _s_[TOP]
            .. m[_s_[U_ARC],_o_[LEFT]]{down}
            .. _s_[MID]
            .. m[_s_[D_ARC],_o_[RIGHT]]{down}
            .. _s_[BOTTOM]
            .. m[_s_[END],_o_[LEFT]]{up};
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

tmppath0 := _o_[RIGHT]{up}
            .. _s_[TOP]
            .. _o_[LEFT]{down}
            .. _s_[MID]
            .. _o_[RIGHT]{down}
            .. _s_[BOTTOM]
            .. _o_[LEFT]{up};

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       
       draw subpath (0,3-m) of tmppath0;
       draw subpath (3+m,6) of tmppath0;
              
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% s -> s
%

start := transition("s","s");

beginfig(start);
   draw tmppic;
endfig;

%
% t -> f
%

start := transition ("t","f");

beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _t_[LEFT] -- _t_[RIGHT];
   
   draw _t_[BEGIN]
        -- _t_[MID]{down}
        .. _t_[BOTTOM]
        .. _t_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% t -> u
%

start := transition("t","u");

beginfig(start);
   draw tmppic;
endfig;

%
% t -> v
%

start := transition("t","v");

beginfig(start);
   draw tmppic;
endfig;

%
% t -> w
%

start := transition("t","w");

beginfig(start);
   draw tmppic;
endfig;

%
% u -> e
%

start := transition("u","e");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _u_[RIGHT] -- _u_[BOTTOM];
   draw _u_[BEGIN]
        -- _u_[LEFT]{down}
        .. _u_[MID]
        .. _u_[RIGHT]{up}
        -- _u_[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;

%
% u -> i
%

start := transition("u","i");

beginfig(start);
   draw tmppic;
endfig;

% Die Enden des u wandern auf i-Höhe
aux[BEGIN] := (xpart(_u_[BEGIN]),ypart(_i_[BEGIN]));
aux[END]   := (xpart(_u_[END]),ypart(_i_[BEGIN]));

% der Querstrich über dem u, der dann zum Punkt
% schrumpft, ist so lang wie der Strich unten rechts:
tmp0 := ypart(_u_[BOTTOM])-ypart(_u_[RIGHT]);
aux[LEFT]  := (-1/2tmp0,ypart(_i_[TOP]));
aux[RIGHT] := (1/2tmp0,ypart(_i_[TOP]));

tmppath0 := aux[LEFT]
            -- aux[RIGHT]
            -- _u_[END]
            -- aux[END];

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       % Der Strich wandert aus dem rechten u-Teil
       % heraus und um die Ecke, wo er einen Querstrich bildet:
       draw subpath (2-2m,3-2m) of tmppath0;
       
       % Der rechte Strich verschwindet schneller, daher min(3m,1):
       draw _u_[RIGHT]
             -- min(3m,1)[_u_[BOTTOM],_u_[RIGHT]];

       draw m[_u_[BEGIN],aux[BEGIN]]
            -- _u_[LEFT]{down}
            .. _u_[MID]
            .. _u_[RIGHT]{up}
            -- m[_u_[END],aux[END]];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

% Die Punkte _u_[LEFT] und _u_[RIGHT] wandern
% zum i-Stamm:
aux[MID] := 1/2[_u_[LEFT],_u_[RIGHT]]; show (aux[MID]/u);

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
      
       t := 1/(1-m);
       draw m[aux[LEFT],_i_[TOP]]
            .. m[aux[RIGHT],_i_[TOP]];
            
       draw m[aux[BEGIN],_i_[BEGIN]]
            -- m[_u_[LEFT],aux[MID]]{down}
            ... _u_[MID]
            ... m[_u_[RIGHT],aux[MID]]{up}
            -- m[aux[END],_i_[BEGIN]];
       
       % Bei engen Kurvenverläufen entstehen Artefakte, die wir
       % überdecken (müssen)
       if m > 0.95: draw _i_[BEGIN] -- _i_[END]; fi
              
       setbounds currentpicture to boundingpath;
    endfig;
endfor



%
% u -> o
%

start := transition("u","o");

beginfig(start);
   draw tmppic;
endfig;

%
% u -> u
%

start := transition("u","u");

beginfig(start);
   draw tmppic;
endfig;

%
% v -> c
%

start := transition("v","c");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _v_[LEFT]
        -- _v_[BOTTOM]
        -- _v_[RIGHT];
   setbounds currentpicture to boundingpath;
endfig;

%
% w -> t
%

start := transition("w","t");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _w_[BEGIN]
        -- _w_[LEFT]
        -- _w_[MID]
        -- _w_[RIGHT]
        -- _w_[END];
   setbounds currentpicture to boundingpath;
endfig;

%
% x -> ()
%

beginfig(standalone("x"));
draw_grid(u);
   pickup pc;

   draw _x_[BEGIN]
        -- _x_[RIGHT];
   draw _x_[LEFT]
        -- 5/4[_x_[LEFT],_x_[END]];
   setbounds currentpicture to boundingpath;
endfig;


%
% y -> n
%

start := transition("y","n");

beginfig(start);
draw_grid(u);
   pickup pc;

   draw _y_[RIGHT]
        -- _y_[BOTTOM]{down}
        .. _y_[D_ARC];
   draw _y_[BEGIN]
        -- _y_[LEFT]
        .. _y_[MID]
        .. _y_[RIGHT]
        -- _y_[END];
   setbounds currentpicture to boundingpath;
endfig;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       tmppath0 := _y_[D_ARC]
                   .. _y_[BOTTOM]{up}
                   -- _y_[RIGHT];
                   
       draw subpath (2m,2) of tmppath0;
       
       draw _y_[BEGIN]
        -- _y_[LEFT]{down}
        .. _y_[MID]
        .. _y_[RIGHT]{up}
        -- _y_[END];
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       
       tmppath0 := _y_[RIGHT] -- (m*m)[_y_[RIGHT],_y_[BOTTOM]];
       tmppath1 := _y_[BEGIN]
                   -- _y_[LEFT]{down}
                   .. _y_[MID]
                   .. _y_[RIGHT]{up}
                   -- _y_[END];
                    
       draw tmppath0 rotatedabout (C,180m);
       draw tmppath1 rotatedabout (C,180m);
       
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% z -> ()
%

beginfig(standalone("z"));
draw_grid(u);
   pickup pc;

   draw _z_[BEGIN]
        -- _z_[U_ARC]
        -- _z_[D_ARC]
        -- _z_[END];
   setbounds currentpicture to boundingpath;
endfig;

end;
