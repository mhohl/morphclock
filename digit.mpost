%
% digits
%
% die Bilder werden in der Form digit.[1]ftnn erzeugt:
% f = "from": Startziffer
% t = "to":   Endziffer
% nn : laufende Nummer
%
% Für die Anzeige der Uhrzeit sind folgende Übergänge notwendig:
%
% 0 -> 1: 01nn
% 1 -> 2: 12nn
% 2 -> 3: 23nn
% ...
% 9 -> 0: 90nn
%
% sowie zusätzlich:
%
% 1 -> 0: 10nn (Zehnerstelle Stunden: 12am -> 01pm)
% 2 -> 0: 20nn (Zehnerstelle Stunden: 23:59 -> 00:00)
% 2 -> 1  21nn (Einerstelle Stunden: 12am -> 01pm)
% 3 -> 0: 30nn (Einerstelle Stunden:  23:59 -> 00:00)
% 5 -> 0: 50nn (Zehnerstelle Minuten: 10:59 -> 11:00)
%
% Die "1" als Zehntausenderstelle kodiert die Nicht-Ziffern:
%
% a <-> p
% m
% :
% für die Übergänge am <-> pm und den Doppelpunkt
%

% Versionsnummer:
string version;
version := "Version: 1.11";
show(version);

outputtemplate := "%j-%c.mps";
outputformat := "eps";

warningcheck := 0; % unterdrückt Fehlermeldungen für i > 4096 bei beginfig(i);

numeric f;      % [f]rame index
numeric fpht;   % [f]rames [p]er [h]alf [t]ransition
fpht := 50;
numeric start;  % [start] of transition;
numeric m;      % [m]orph factor
numeric t;      % [t]ension
numeric tt;     % ano[t]her [t]ension ;-)
numeric phi[];  % rotation angle [phi1]
numeric u;      % [u]nit
u := 5cm;
numeric q;      % [q]adratic factor
pair C;         % [C]enter of rotation
C := (0,0.425u);
pen pc;         % [p]en[c]ircle
pc := pencircle scaled 0.1u;
path tmppath[]; % [t]e[mp]orary [path]
numeric tmp[];  % [t]e[mp]orary variable
pair aux[];     % [aux]iliary points;
picture tmppic; % [t]e[mp]orary [pic]ture

% symbolische Variablen
numeric LEFT, RIGHT, TOP, BOTTOM;
numeric BEGIN, END, JOINT, MID;
numeric L_ARC, R_ARC, U_ARC, D_ARC;
LEFT   = 1000;
RIGHT  = 1001;
TOP    = 1002;
BOTTOM = 1003;
BEGIN  = 1004;
END    = 1005;
JOINT  = 1006;
MID    = 1007;
L_ARC  = 1008; % [l]eft (part of) [arc]
R_ARC  = 1009; % [r]ight (part of) [arc]
U_ARC  = 1010; % [u]pright (part of) [arc]
D_ARC  = 1011; % [d]ownright (part of) [arc]

% Arrays für die Koordinaten der Ziffern …
pair zero[], one[],   two[], three[], four[];
pair five[], six[], seven[], eight[], nine[];
% … und die anderen Zeichen
pair _a_[], _p_[], _m_[], colon[];

% draft kennzeichnet den Entwurfsmodus:
numeric draft; draft := 1;

def draw_grid(expr u) =
    if draft > 0:
      draw (-0.6u,-0.75u) -- (-0.6u,1.5u) -- (0.6u,1.5u) -- (0.6u,-0.75u) -- cycle;
      draw (-0.6u,0) -- (0.6u,0);
      draw (-0.6u,0.85u) -- (0.6u,0.85u);
      draw (-0.25u,-0.75u)--(-0.25u,1.5u);
      draw (0.25u,-0.75u)--(0.25u,1.5u);
    fi
enddef;

path boundingpath;
boundingpath := (-0.6u,-0.75u)
                -- (-0.6u,1.5u)
                -- (0.6u,1.5u)
                -- (0.6u,-0.75u)
                -- cycle;

vardef advanced(expr xx) = sind(90xx) enddef;
vardef retarded(expr xx) = 1-cosd(90xx) enddef;

% Die Exponentialfunktion ist standardmäßig nicht definiert: 
vardef exp(expr xx) = (mexp(256)**xx) enddef;

% Wir definieren ein "yshifted" für den Buchstaben "m":
primarydef z yshifted yy = z shifted (0,yy) enddef;

% eine Funktion zur Berechnung des Startwertes gemäß [1]ftnn:
vardef transition(expr from, to) =
    save i;
    if numeric(from):  i := from * 1000;
    elseif from = "a": i := 10000;
    elseif from = "p": i := 11000;
    elseif from = "m": i := 12000;
    else:              i := 13000;
    fi
    if numeric(to):  i := i + to * 100;
    elseif to = "a": i := i + 0;
    elseif to = "p": i := i + 100;
    elseif to ="m":  i := i + 200;
    else:            i := i + 300;
    fi
    i
enddef;

%
% Null
%
zero[TOP]    = (0,0.85u);
zero[BOTTOM] = (0,0);
zero[LEFT]   = (-0.25u,0.425u);
zero[RIGHT]  = zero[LEFT] xscaled -1;

start := transition(0,1);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw zero[TOP]
        .. zero[RIGHT]
        .. zero[BOTTOM]
        .. zero[LEFT]
        .. cycle;
   setbounds currentpicture to boundingpath;
endfig;

%
% Null -> Eins
%
one[BEGIN]  = (-0.25u,0.55u);
one[TOP]    = zero[TOP];
one[BOTTOM] = zero[BOTTOM];

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-start)/fpht;
       m := retarded(f);

       if m < 1:
          draw zero[TOP]
               ... (m/2)[zero[RIGHT],zero[LEFT]]
               ... zero[BOTTOM]
             ... (m/2)[zero[LEFT],zero[RIGHT]]
             ... cycle;
       else:
          % für m = 1 entstünden seltsame Schlaufen
          draw one[TOP] -- one[BOTTOM];
       fi
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-start-fpht)/fpht;
       m := advanced(f);

       draw m[one[TOP],one[BEGIN]]
            -- one[TOP]
            -- one[BOTTOM];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Eins
%
start := transition(1,2);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw one[BEGIN]
        -- one[TOP]
        -- one[BOTTOM];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;
% 1 -> 0
beginfig(transition(1,0));
   draw tmppic;
endfig;

%
% Eins -> Zwei
%
two[BEGIN] = one[BEGIN];
two[TOP]   = one[TOP];
two[R_ARC] = (0.225u,0.55u);
two[JOINT] = (-0.25u,0);
two[END]   = (0.25u,0);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       draw one[BEGIN]
            -- m[one[TOP],two[R_ARC]]
            -- m[one[BOTTOM],two[JOINT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 1/sqrt(sqrt(m)); % zur Vermeidung einer Spitze im Scheitel der 2

       aux[MID] := (1/2)[two[BEGIN],two[R_ARC]];
       aux[TOP] := m[aux[MID],two[TOP]];

       draw two[BEGIN]
            .. tension  t .. aux[TOP]
            .. tension  t .. two[R_ARC]
            .. tension 2t .. two[JOINT]
          & two[JOINT]
            -- m[two[JOINT],two[END]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Zwei
%
start := transition(2,3);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw two[BEGIN]
        .. two[TOP]
        .. two[R_ARC]
        .. tension 2 .. two[JOINT]
      & two[JOINT] -- two[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;
% 2 -> 0
beginfig(transition(2,0));
   draw tmppic;
endfig;
% 2 -> 1
beginfig(transition(2,1));
   draw tmppic;
endfig;

%
% Zwei -> Drei
%
three[BEGIN] = (-0.25u,0.65u);
three[TOP]   = two[TOP];
three[U_ARC] = (0.25u,0.5u);
three[JOINT] = (-0.15u,0);
three[D_ARC] = (0.3u,-0.5u);
three[END]   = three[D_ARC] xscaled -1;

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       phi1 := -90m;

       draw two[BEGIN]
            .. two[TOP]
            .. two[R_ARC]
            .. tension 2 .. two[JOINT]
          & two[JOINT]
            -- two[END] rotatedaround (two[JOINT],phi1);
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 1/m;

       aux[END] := two[END] rotatedaround (two[JOINT],-90);

       draw m[two[BEGIN],three[BEGIN]]
            .. three[TOP]
            .. m[two[R_ARC],three[U_ARC]]
            .. tension (2-m) .. m[two[JOINT],three[JOINT]]
          & m[two[JOINT],three[JOINT]]
            .. m[two[JOINT],three[D_ARC]]
            .. m[aux[END],three[END]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Drei
%
start := transition(3,4);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw three[BEGIN]
        .. three[TOP]
        .. three[U_ARC]
        .. three[JOINT]
      & three[JOINT]
        .. three[D_ARC]
        .. three[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;
% 3 -> 0
beginfig(transition(3,0));
   draw tmppic;
endfig;

%
% Drei -> Vier
%
four[LEFT]   = (-0.25u,0);
four[TOP]    = (0.25u,0.85u);
four[MID]    = four[LEFT] xscaled -1;
four[BOTTOM] = (0.25u,-0.65u);
four[RIGHT]  = (0.4u,0);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       t := max(15f*f,1);

       % Der "Austrittswinkel" des unteren Bogens an der "Spitze"
       % wird ermittelt und wandert langsam gegen 0.
       tmppath0 := three[JOINT] .. three[D_ARC] .. three[END];
       aux0 := direction 0 of tmppath0;
       phi1 := (1-m)*angle(aux0);

       draw m[three[BEGIN],four[LEFT]]
            .. tension t .. m[three[TOP],four[TOP]]
            .. tension t .. m[three[U_ARC],four[MID]]
            .. tension t .. three[JOINT]
          & three[JOINT]{dir phi1}
            .. three[D_ARC]
            .. three[END];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := max(15*f*f*f,1);

       draw four[LEFT]
            -- four[TOP]
            -- four[MID]
            -- m[three[JOINT],four[LEFT]]{right}
            .. tension t .. m[three[D_ARC],four[MID]]
            .. tension t .. m[three[END],four[BOTTOM]];
       draw four[MID]
            -- m[four[MID],four[RIGHT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Vier
%
start := transition(4,5);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw four[RIGHT]
        -- four[LEFT]
        -- four[TOP]
        -- four[BOTTOM];
   setbounds currentpicture to boundingpath;
endfig;

%
% Vier -> Fünf
%
five[BEGIN] = four[TOP];
five[LEFT]  = five[BEGIN] xscaled -1;
five[JOINT] = four[LEFT];
five[U_ARC] = (0,0.1u);
five[R_ARC] = (0.3u,-0.425u);
five[END]   = (-0.3u,-0.7u);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       draw four[TOP]
            -- four[LEFT]
            -- m[four[RIGHT],four[MID]];
       draw m[four[TOP],four[MID]]
            -- four[BOTTOM];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := max(5(1-m),1);

       % Der Pfad soll bei five[END] maximal waagrecht werden
       % und nicht nach rechts unten zeigen. Weil hier angle(...)
       % einen Vorzeichenwechsel hat, muss eine if-Anweisung her.
       tmppath0 := five[JOINT]
                   .. tension t .. m[four[MID],five[U_ARC]]
                   .. tension 1 .. m[four[MID],five[R_ARC]]
                   .. tension t .. m[four[BOTTOM],five[END]];
       aux4 := direction 4 of tmppath0;
       phi1 := angle(aux4); if phi1 > 0 : phi1 := -180; fi

       draw five[BEGIN]
            -- m[four[TOP],five[LEFT]]
            -- five[JOINT]
            .. tension t .. m[four[MID],five[U_ARC]]
            .. tension 1 .. m[four[MID],five[R_ARC]]
            .. tension t .. {dir phi1}m[four[BOTTOM],five[END]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Fünf
%
start := transition(5,6);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw five[BEGIN]
        -- five[LEFT]
        -- five[JOINT]
        .. five[U_ARC]
        .. five[R_ARC]
        .. {left}five[END];
   setbounds currentpicture to boundingpath;
   tmppic := currentpicture;
endfig;
% 5-> 0
beginfig(transition(5,0));
   draw tmppic;
endfig;

%
% Fünf -> Sechs
%
six[BEGIN]  = (0.25u,1.35u);
six[LEFT]   = zero[LEFT] xscaled 3/2;
six[RIGHT]  = zero[RIGHT] xscaled 3/2;
six[TOP]    = zero[TOP];
six[BOTTOM] = zero[BOTTOM];

% wir gehen hier nur bis fpht-1, weil bei fpht die Schleife geschossen wäre
% und sich die Zeichenrichtung umdreht:
for i = start+1 upto start+fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       % die linke Ecke five[LEFT] wandert genauso schnell nach oben wie
       % five[BEGIN], aber die x-Koordinate bleibt unverändert:

       aux[LEFT] := (xpart(five[LEFT]),ypart(m[five[BEGIN],six[BEGIN]]));

       draw m[five[BEGIN],six[BEGIN]]
            -- aux[LEFT]
            -- m[five[JOINT],six[LEFT]];
       draw m[five[JOINT],six[LEFT]]
            .. m[five[U_ARC],six[TOP]]
            .. m[five[R_ARC],six[RIGHT]]
            .. {left}m[five[END],six[BOTTOM]]
            .. m[five[END],six[LEFT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 1/(m+0.001); % m kann Null werden

       % wir ermitteln den Punkt, der auf 2/3 des abschließenden Bogens liegt;
       % aux[MID] wandert von der linken Ecke der nach oben geschobenen "5"
       % zum Zielpunkt.
       % Weil er dann auf dem Bogen liegt, kann er bei der "6" einfach
       % weggelassen weden.

       tmppath0   := six[LEFT]{up} .. six[BEGIN];
       aux[END]   := point 2/3 of tmppath0;
       aux[BEGIN] := (xpart(five[LEFT]),ypart(six[BEGIN]));
       aux[MID]   := m[aux[BEGIN],aux[END]];

       draw six[LEFT]{up}
            .. six[TOP]
            .. six[RIGHT]
            .. six[BOTTOM]
            .. six[LEFT]{up}
            .. tension t .. aux[MID]
            .. tension t .. six[BEGIN];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Sechs
%
start := transition(6,7);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw six[LEFT]{up}
        .. six[TOP]
        .. six[RIGHT]
        .. six[BOTTOM]
        .. six[LEFT]{up}
        .. six[BEGIN];
   setbounds currentpicture to boundingpath;
endfig;

%
% Sechs -> Sieben
%
seven[BEGIN] = (-0.3u,0.75u);
seven[LEFT]  = (-0.3u,0.85u);
seven[JOINT] = seven[LEFT] xscaled -1;
seven[MID]   = (0.1u,0.15u);
seven[END]   = (0,-0.65u);
% Hilfspunkt:
seven[TOP]   = (1/2)[seven[LEFT],seven[JOINT]];

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       q := 2m*m-2*m+1;
         % Parabelabschnitt y = 1 .. 1/2 .. 1 für x = 0 .. 0.5 .. 1;
       phi1 := 180m;

       aux[MID]   := six[LEFT]   rotatedaround (C,phi1);
       aux[END]   := (six[BEGIN] yscaled q) rotatedaround (C,phi1);
       aux[TOP]   := six[RIGHT]  rotatedaround (C,phi1/2);
       aux[LEFT]  := six[TOP]    rotatedaround (C,phi1/4);
       aux[JOINT] := six[BOTTOM] rotatedaround (C,3phi1/4);
       aux[BEGIN] := six[LEFT] shifted (0.125m*u,0.075m*u);

       draw aux[BEGIN]
            ... aux[LEFT]
            ... aux[TOP]
            ... aux[JOINT]
            .. aux[MID]{dir (phi1+90)}
            .. aux[END];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := max(30m*m,1);

       % Der Tangentenwinkel an JOINT beträgt
       % näherungsweise -45° und soll zu -90°=down wandern
       % TODO: korrekt berechnen!
       phi1 := -45(m+1);

       draw m[aux[BEGIN],seven[BEGIN]]
            .. tension t .. m[aux[LEFT],seven[LEFT]]
            .. tension t .. m[aux[TOP],seven[TOP]]{right}
            .. tension t .. m[aux[JOINT],seven[JOINT]]{dir phi1}
            .. m[aux[MID],seven[MID]]
            .. m[aux[END],seven[END]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Sieben
%
start := transition(7,8);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw seven[BEGIN]
        -- seven[LEFT]
        -- seven[JOINT]{down}
        .. seven[MID]
        .. seven[END];
   setbounds currentpicture to boundingpath;
endfig;

%
% Sieben -> Acht
%
eight[MID]    = (0,0.85u);
eight[L_ARC]  = (-0.25u,1.1u);
eight[R_ARC]  = eight[L_ARC] xscaled -1;
eight[LEFT]   = (-0.4u,0.35u);
eight[RIGHT]  = eight[LEFT] xscaled -1;
eight[BOTTOM] = zero[BOTTOM];

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       tmppath1 := m[seven[BEGIN],seven[LEFT]]
                   -- seven[LEFT]
                   -- seven[JOINT]{down}
                   .. seven[MID]
                   .. seven[END];

       % der Mittelstrich wächst aus der Mitte der Höhe der Sieben:
       tmp0 := 1/2[ypart(seven[LEFT]),ypart(seven[END])];
       aux[MID]   := ((-infinity,tmp0)--(infinity,tmp0)) intersectionpoint tmppath1;
       aux[LEFT]  := aux[MID] - (0.15u,0);
       aux[RIGHT] := aux[MID] + (0.15u,0);

       draw tmppath1;
       draw m[aux[MID],aux[LEFT]] -- m[aux[MID],aux[RIGHT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 1/f;
       tt := max(t/2,1);

       draw m[seven[END],eight[RIGHT]]
            .. m[seven[MID],eight[LEFT]]
            .. m[seven[MID],eight[MID]]
            .. m[seven[JOINT],eight[R_ARC]]{up}
            .. tension t .. m[seven[LEFT],eight[L_ARC]];
       draw m[aux[LEFT],eight[L_ARC]]{down}
            .. tension tt .. m[aux[MID],eight[MID]]
            .. tension tt .. {down}m[aux[RIGHT],eight[RIGHT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Acht
%
start := transition(8,9);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw eight[R_ARC]
        .. eight[MID]
        .. eight[LEFT]
        .. eight[BOTTOM]
        .. eight[RIGHT]
        .. eight[MID]
        .. eight[L_ARC]
        .. cycle;
   setbounds currentpicture to boundingpath;
endfig;

%
% Acht -> Neun
%
nine[TOP]    = six[TOP];
nine[LEFT]   = six[LEFT];
nine[RIGHT]  = six[RIGHT];
nine[BOTTOM] = six[BOTTOM];
nine[END]    = (-0.25u,-0.65u);

for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       phi1 := -90m*m;

       % Die Acht kippt um 90° nach rechts,
       % aus eight[MID] wird nine[RIGHT] etc.
       % Um zu skalieren, drehen wir daher
       % nine[RIGHT|LEFT|TOP|BOTTOM] um 90° nach links:

       aux[MID]    := nine[RIGHT]  rotatedaround (C,90);
       aux[BOTTOM] := nine[LEFT]   rotatedaround (C,90);
       aux[LEFT]   := nine[TOP]    rotatedaround (C,90);
       aux[RIGHT]  := nine[BOTTOM] rotatedaround (C,90);

       % Wir ändern die Punktreihenfolge, um bei i=830
       % eine geschlossene Schleife zu bekommen:

       tmppath1 := m[eight[LEFT],aux[LEFT]]
                   .. m[eight[BOTTOM],aux[BOTTOM]]
                   .. m[eight[RIGHT],aux[RIGHT]]
                   .. m[eight[MID],aux[MID]]
                   if i < start+fpht:
                      .. m[eight[L_ARC],aux[MID]]
                      .. m[eight[R_ARC],aux[MID]]
                      .. m[eight[MID],aux[MID]]
                   fi
                   .. cycle;

       draw tmppath1 rotatedaround (C,phi1);
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       % Der Endpunkt des Bogens wandert von nine[RIGHT] ausgehend am
       % tatsächlichen Bogen entlang:

       tmppath0 := nine[RIGHT]{down} .. nine[END];
       aux[END] := point m of tmppath0;

       draw nine[RIGHT]{down}
            .. nine[BOTTOM]
            .. nine[LEFT]
            .. nine[TOP]
            .. nine[RIGHT]{down}
            .. aux[END];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Neun
%
start := transition(9,0);
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw nine[RIGHT]{down}
        .. nine[BOTTOM]
        .. nine[LEFT]
        .. nine[TOP]
        .. nine[RIGHT]{down}
        .. nine[END];
   setbounds currentpicture to boundingpath;
endfig;

%
% Neun -> Null
%
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       % Der Bogen der Neun soll beim Aufwickeln ein bisschen
       % nach links gestreckt werden:

       q := -2m*m+2m+1; % durchläuft 1 .. 3/2 .. 1 für x = 0 .. 0.5 .. 1;
       aux[END] := m[nine[END],nine[LEFT]] xscaled q;

       % wir legen einen Hilfspunkt dort an, wo der untere Bogen die
       % y-Achse schneidet. Steigt der y-Wert des Hilfspunktes über
       % die Unterkante der geschlossenen Schleife, wird als y-Koordinate
       % die Unterkante der Schleife gewählt, um zu verhindern, dass
       % der Bogen beim "Aufwickeln" ins Innere der geschlossenen Schleife
       % ragt.

       tmppath0 := nine[RIGHT]{down} .. aux[END];
       aux0 := ((0,-infinity)--(0,infinity)) intersectionpoint tmppath0;
       tmp0 := ypart(aux0);
       tmp1 := ypart(nine[BOTTOM]);
       aux[MID] := (0,min(tmp0,tmp1));

       draw nine[RIGHT]{down}
            .. nine[BOTTOM]
            .. nine[LEFT]
            .. nine[TOP]
            .. nine[RIGHT]{down}
            .. aux[MID]
            .. aux[END];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       draw zero[TOP]
            .. m[nine[RIGHT],zero[RIGHT]]
            .. zero[BOTTOM]
            .. m[nine[LEFT],zero[LEFT]]
            .. cycle;
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Spezielle Ziffernübergänge: 1 -> 0, 2 -> 0, 2 -> 1, 3 -> 0, 5 -> 0
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
% Eins -> Null
%
start := transition(1,0);
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       tmppath1 := C -- one [TOP] -- one[BEGIN];

       draw subpath (0,2*(1-m)) of tmppath1;
       draw C -- m[one[BOTTOM],C];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-start-fpht)/fpht;
       m := advanced(f);
       
       % Der horizontale Abstand zwischen dem linken und rechten Rand:
       tmp0 := xpart(m[C,zero[RIGHT]])-xpart(m[C,zero[LEFT]]);

       draw m[C,zero[TOP]]
            .. m[C,zero[RIGHT]]
            .. m[C,zero[BOTTOM]]
            .. m[C,zero[LEFT]]
            .. cycle;
       % Bei engen Schlaufen gibt es Artefakte, daher setzen wir
       % einen Punkt in die Mitte, der diese überdeckt:
       if tmp0 < 0.1u : draw C; fi
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Zwei -> Null
%
start := transition(2,0);
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       t := 2-m;

       tmppath0 := two[BEGIN] .. two[TOP] .. two[R_ARC];
       aux0     := direction 0 of tmppath0;
       phi1     := m[angle(aux0),90];

       draw m[two[BEGIN],zero[LEFT]]{dir phi1}
            .. m[two[TOP],zero[TOP]]
            .. m[two[R_ARC],zero[RIGHT]]
            .. tension t .. m[two[JOINT],zero[BOTTOM]];
       draw two[JOINT] -- two[END];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

% Ursprünglicher Winkel bei zero[BOTTOM] ist nicht
% von einem Parameter abhängig:
tmppath0 := zero[LEFT]{up}
                  .. zero[TOP]
                  .. zero[RIGHT]
                  .. zero[BOTTOM];
aux3 := direction 3 of tmppath0;

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       phi1 := m[angle(aux3),-180];

       tmppath0 := zero[BOTTOM]{left} .. m[two[JOINT],zero[LEFT]];
       aux1     := direction 1 of tmppath0;
       phi2     := max(angle(aux1),90);

       draw zero[LEFT]{up}
            .. zero[TOP]
            .. zero[RIGHT]
            .. zero[BOTTOM]{dir phi1};
       draw m[two[END],zero[BOTTOM]]
            -- zero[BOTTOM]{left}
            .. m[two[JOINT],zero[LEFT]]{dir phi2};
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Zwei -> Eins
%
start := transition(2,1);
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       t := 10*m*m+1;

       %aux[TOP] entspricht dem Startpunkt der Eins, heruntergeklappt
       % an den Mittelstrich:
       aux[TOP]    := one[TOP] shifted (0,-length(one[BEGIN]-one[TOP]));
       % two[R_ARC] und two[JOINT|END] wandern waagrecht zum Mittelstrich:
       aux[MID]    := (xpart(one[TOP]),ypart(two[R_ARC]));
       aux[BOTTOM] := (xpart(one[TOP]),ypart(two[END]));

       if m < 1:
          draw m[two[BEGIN],aux[TOP]]
               .. tension t .. two[TOP]
               .. tension t .. m[two[R_ARC],aux[MID]]
               .. tension (t+1) .. m[two[JOINT],aux[BOTTOM]]
               -- m[two[END],aux[BOTTOM]];
       else:
          draw one[TOP] -- one[BOTTOM];
       fi
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       phi0 := -90-angle(one[BEGIN]-one[TOP]);
       phi1 := (1-m)*phi0;

       draw one[BEGIN] rotatedaround (one[TOP],phi1)
            -- one[TOP]
            -- one[BOTTOM];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Drei -> Null
%
start := transition(3,0);
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       % Übergang oberer Bogen Drei zur Dreiviertel-Null
       tmppath0 := three[BEGIN]
                   .. three[TOP]
                   .. three[U_ARC]
                   .. three[JOINT];
       aux0 := direction 0 of tmppath0;
       phi1 := m[angle(aux0),90];
       aux3 := direction 3 of tmppath0;
       phi2 := m[angle(aux3),-180];

       % Der untere Bogen soll zu einem senkrecht nach unten geklappten
       % Viertelsegment der Null werden:

       tmppath1 := zero[BOTTOM]{left} .. zero[LEFT]{up};
       phi0     := 270-angle(zero[LEFT]-zero[BOTTOM]);

       aux[JOINT] := m[three[JOINT],zero[BOTTOM]];
       aux[D_ARC] := (point 0.5 of tmppath1) rotatedaround (zero[BOTTOM],phi0);
       aux[END]   := zero[LEFT] rotatedaround (zero[BOTTOM],phi0);

       draw m[three[BEGIN],zero[LEFT]]{dir phi1}
            .. m[three[TOP],zero[TOP]]
            .. m[three[U_ARC],zero[RIGHT]]
            .. aux[JOINT]{dir phi2}
          & aux[JOINT]
            .. m[three[D_ARC],aux[D_ARC]]
            .. m[three[END],aux[END]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       phi1 := (1-m)*phi0;

       draw zero[LEFT]{up}
            .. zero[TOP]
            .. zero[RIGHT]
            .. zero[BOTTOM]{left}
            % Der Viertelbogen klappt nach oben:
          & tmppath1 rotatedaround (zero[BOTTOM],phi1);
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% Fünf -> Null
%
start := transition(5,0);
% wir gehen hier nur bis fpht-1, weil bei fpht die Schleife geschossen wäre
% und sich die Zeichenrichtung umdreht (siehe Übergang 5 -> 6):
for i = start+1 upto start+fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       tmppath0 := m[five[JOINT],zero[LEFT]]
                   .. m[five[U_ARC],zero[TOP]]
                   .. m[five[R_ARC],zero[RIGHT]]
                   .. {left}m[five[END],zero[BOTTOM]]
                   .. m[five[END],zero[LEFT]]{up};

       aux0 := direction 0 of tmppath0;
       phi1 := min(angle(aux0),90);

       draw m[five[BEGIN],five[LEFT]]
            -- five[LEFT]
            -- m[five[JOINT],zero[LEFT]]
          & m[five[JOINT],zero[LEFT]]{dir phi1}
            .. m[five[U_ARC],zero[TOP]]
            .. m[five[R_ARC],zero[RIGHT]]
            .. {left}m[five[END],zero[BOTTOM]]
            .. m[five[END],zero[LEFT]]{up};
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 1/(m+0.001); % m kann Null werden

       draw zero[LEFT]{up}
            .. zero[TOP]
            .. zero[RIGHT]
            .. zero[BOTTOM]
            .. zero[LEFT]{up}
            -- m[five[LEFT],zero[LEFT]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Weitere Übergänge: a -> p, p -> a, m -> m, : -> :
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
% a
%

_a_[BEGIN]  = (-0.25u,0.6u);
_a_[TOP]    = zero[TOP];
_a_[R_ARC]  = _a_[BEGIN] xscaled -1;
_a_[JOINT]  = (0.25u,0.15u);
_a_[END]    = (0.325u,0);
_a_[L_ARC]  = _a_[JOINT] xscaled -1;
_a_[BOTTOM] = zero[BOTTOM];

start := transition("a","p");
beginfig(start);
   draw_grid(u);
   pickup pc;

   tmppath1 := _a_[BEGIN]
               ..  _a_[TOP]
               ..  _a_[R_ARC]
               --- _a_[JOINT]
               .. _a_[END];
   aux0 := direction 2 of tmppath1;
   phi[R_ARC] := angle(aux0);
   % phi[R_ARC] wird für a -> p UND p -> a benötigt!

   tmppath2 := _a_[R_ARC]{dir phi[R_ARC]}
               .. _a_[L_ARC]
               .. _a_[BOTTOM]
               .. _a_[JOINT];
   % Der Schnitpunkt von a-"Bauch" und y-Achse wird
   % beim Übergang p -> a benötigt:
   _a_[MID] := tmppath2 intersectionpoint ((0,0.01u)--(0,infinity));

   draw tmppath1;
   draw tmppath2;
   setbounds currentpicture to boundingpath;
endfig;

_p_[BEGIN]  = (-0.325u,0.85u);
_p_[END]    = (-0.325u,-0.65u);
_p_[U_ARC]  = (-0.325u,0.6u); % [u]pper end of [arc]
_p_[D_ARC]  = (-0.325u,0.15u);
_p_[TOP]    = zero[TOP];
_p_[BOTTOM] = zero[BOTTOM];
_p_[RIGHT]  = (0.325u,0.425u);

%
% a -> p
%
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);

       % Der Startpunkt vom "a" wandert nach links
       aux[BEGIN] := (xpart(m[_a_[BEGIN],_p_[END]]),ypart(_a_[BEGIN]));
       % Der "Bauch" wird im ersten Drittel der Frames eingezogen,
       % damit die Linie vorbeilaufen kann, ohne ihn zu berühren.

       tmp0 := min(3m,1);
       aux[L_ARC] := _a_[L_ARC] xscaled (1-(2/5)*tmp0);

       tmppath1 := m[aux[BEGIN],_p_[END]]
                   ..  aux[BEGIN]{up}
                   ..  _a_[TOP]
                   ..  _a_[R_ARC]
                   --- _a_[JOINT]
                   ..  _a_[END];
       draw  subpath (0,5-m) of tmppath1;
       draw _a_[R_ARC]{dir phi[R_ARC]}
            .. aux[L_ARC]
            .. _a_[BOTTOM]
            .. _a_[JOINT];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);

       aux[BEGIN] := (xpart(_p_[END]),ypart(_a_[BEGIN]));
       aux[L_ARC] := _a_[L_ARC] xscaled 3/5;

       % Der Ansatzpunkt wandert am p-Bogen entlang bis zum
       % unteren Ansatz am senkrechten Stamm:
       tmppath1   := _p_[D_ARC]
                     --  m[aux[BEGIN],_p_[U_ARC]]
                     ..  _a_[TOP]
                     ..  m[_a_[R_ARC],_p_[RIGHT]]
                     --- m[_a_[JOINT],_p_[RIGHT]];
       aux[R_ARC] := point 3-3m of tmppath1;

       % Wir brauchen den Winkel am unteren Ansatz des p-Bogens:
       tmppath0 := _p_[D_ARC]
                   .. _p_[BOTTOM]
                   .. _p_[RIGHT]
                   .. _p_[TOP]
                   .. _p_[U_ARC];
       aux0 := direction 0 of tmppath0;
       phi[D_ARC] := angle(aux0);
       % phi[D_ARC] wird auch für die Transformation p -> a benötigt!

       % Ein Hilfspfad beschreibt den Weg von aux[L_ARC] -> _a_[BOTTOM]
       tmppath2    := aux[L_ARC] .. _a_[BOTTOM]{right};
       aux[BOTTOM] := point m of tmppath2;

       draw _p_[END] -- m[aux[BEGIN],_p_[BEGIN]];
       draw tmppath1;
       % Während der Ansatzpunkt wandert, verändert sich der Winkel:
       draw aux[R_ARC]{dir m[phi[R_ARC],phi[D_ARC]]}
            .. aux[BOTTOM]
            .. _a_[BOTTOM]
            .. m[_a_[JOINT],_p_[RIGHT]]{up};
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% p
%
start := transition("p","a");
beginfig(start);
   draw_grid(u);
   pickup pc;

   draw _p_[BEGIN] -- _p_[END];
   draw _p_[U_ARC]
        .. _p_[TOP]
        .. _p_[RIGHT]
        .. _p_[BOTTOM]
        .. _p_[D_ARC];
   setbounds currentpicture to boundingpath;
endfig;

%
% p -> a
%
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       phi0 := 180m;

       % nach einer Vierteldrehung hat der p-Strich bereits die
       % gewünschte Länge:
       tmp1 := min (2m,1);

       aux[END] := (xpart(_p_[END]),0);

       tmppath1 := _p_[BEGIN]
                   -- tmp1[_p_[END],aux[END]];
       tmppath2 := _p_[U_ARC]
                   .. _p_[TOP]
                   .. _p_[RIGHT]
                   .. _p_[BOTTOM]
                   .. _p_[D_ARC];

       draw tmppath1 rotatedaround (C,phi0);
       draw tmppath2 rotatedaround (C,phi0);
       setbounds currentpicture to boundingpath;
    endfig;
endfor

aux[MID]    := _p_[D_ARC]  rotatedaround (C,180);
aux[BEGIN]  := aux[END]    rotatedaround (C,180);
aux[R_ARC]  := _p_[U_ARC]  rotatedaround (C,180);
aux[JOINT]  := _p_[BEGIN]  rotatedaround (C,180);
aux[L_ARC]  := _p_[RIGHT]  rotatedaround (C,180);
aux[BOTTOM] := _p_[TOP]    rotatedaround (C,180);
aux[TOP]    := _p_[BOTTOM] rotatedaround (C,180);

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       t := 10m+1;

       % phi[D_ARC] ist der Winkel am unteren Bogenansatz des P
       % und muss daher um 180° gedreht werden;
       % phi[R_ARC] ist der Winkel am Ansatzpunkt vom "a" (s.o.)
       phi0 := m[phi[D_ARC]-180,phi[R_ARC]];

       % der gedrehte und verkürzte p-"Stamm" wird zum oberen Bogen:
       tmppath1 := m[aux[JOINT],_a_[END]]
                   .. m[aux[JOINT],_a_[JOINT]]{up} % up/tension/up entspricht ---
                   .. tension t .. m[aux[R_ARC],_a_[R_ARC]]{up}
                   .. m[aux[MID],_a_[TOP]]
                   .. m[aux[BEGIN],_a_[BEGIN]];

       % der gedrehte p-Bogen wird zum a-"Bauch":
       tmppath2 := m[aux[MID],_a_[R_ARC]]{dir phi0}
                   .. m[aux[TOP],_a_[MID]]
                   .. m[aux[L_ARC],_a_[L_ARC]]
                   .. m[aux[BOTTOM],_a_[BOTTOM]]
                   .. m[aux[R_ARC],_a_[JOINT]];

       % die beiden Pfade überschneiden sich am Anfang sichtbar, daher
       % kürzen wir den "Bauch"-Pfad:
       aux0 := tmppath1 intersectiontimes tmppath2;

       draw tmppath1;
       draw subpath (ypart(aux0),4) of tmppath2;
       setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% m
%

tmp0 := 0.375;
tmp1 := 0.85;
_m_[BEGIN] = (-tmp0*u,tmp1*u);
_m_[LEFT]  = (-tmp0*u,3/4*tmp1*u);
_m_[BOTTOM] = (-tmp0*u,0);
_m_[L_ARC] = (-.5tmp0*u,tmp1*u);
_m_[JOINT] = (0,0.65u);
_m_[MID]   = (0,0);
_m_[R_ARC] = _m_[L_ARC] xscaled -1;
_m_[RIGHT] = _m_[LEFT] xscaled -1;
_m_[END]   = _m_[BOTTOM] xscaled -1;

start := transition("m","m");
beginfig(start);
draw_grid(u);
   pickup pc;

   draw _m_[BEGIN] -- _m_[LEFT];
   draw _m_[BOTTOM]
        -- _m_[LEFT]{up}
        .. _m_[L_ARC]
        .. _m_[JOINT]{down}
     &  _m_[JOINT]{up}
        .. _m_[R_ARC]
        .. _m_[RIGHT]{down}
        -- _m_[END];
   draw _m_[MID] -- _m_[JOINT];
   setbounds currentpicture to boundingpath;
endfig;

%
% Zur Animation des m benutzen wir folgende Funktion:
%
%  1.5 +-+---------+----------+-----------+----------+-----------+--------+-+
%      +           +          +           +          +           +          +
%      |                                sqrt(2*exp(1))*x*exp(-x**2) ******* |
%    1 +-+                                      ****                      +-+
%      |                                       *    ***                     |
%      |                                     **       **                    |
%  0.5 +-+                                   *          **                +-+
%      |                                   **             **                |
%      |                                   *                ***             |
%    0 +-+                                *                    **************
%      **************                    *                                  |
%      |             ***                *                                   |
%      |                **             **                                   |
% -0.5 +-+                **          *                                   +-+
%      |                    **       **                                     |
%      |                     ***    *                                       |
%   -1 +-+                      ****                                      +-+
%      |                                                                    |
%      +           +          +           +          +           +          +
% -1.5 +-+---------+----------+-----------+----------+-----------+--------+-+
%     -3          -2         -1           0          1           2          3
%
% Wir substituieren:
% x => scale*(x-shift*(2*t-1)), somit  [0 .. t .. 1] => [-1 .. 2t-1 .. 1]
% "shift" gibt die Lage des Nullpunktes der Funktion an,
% "scale" komprimiert den Funktionsverlauf für scale > 1
% "amplitude" ist selbsterklärend
%
% Die Verzerrung läuft somit für t=[0..1] von links nach rechts durch das
% Bild

def wiggle(expr x, t) =
    begingroup
    save scale, shift, amplitude, res;
    scale := 2;
    shift := 1.25;
    amplitude := 0.15;
    res := scale*(x-shift*(2*t-1));
    res := amplitude*sqrt(2*exp(1))*res*exp(-res*res);
    res
    endgroup
enddef;

%
% m -> m
%
for i = start+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/(2fpht);
       m := f;
       
       aux[BEGIN] := _m_[BEGIN] yshifted (wiggle(xpart(_m_[BEGIN])/u,f)*u);
       aux[LEFT]  := _m_[LEFT]  yshifted (wiggle(xpart(_m_[LEFT] )/u,f)*u);
       aux[JOINT] := _m_[JOINT] yshifted (wiggle(xpart(_m_[JOINT])/u,f)*u);
       aux[RIGHT] := _m_[RIGHT] yshifted (wiggle(xpart(_m_[RIGHT])/u,f)*u);
       aux[L_ARC] := _m_[L_ARC] yshifted (wiggle(xpart(_m_[L_ARC])/u,f)*u);
       aux[R_ARC] := _m_[R_ARC] yshifted (wiggle(xpart(_m_[R_ARC])/u,f)*u);
       
       draw aux[BEGIN] -- aux[LEFT];
       draw _m_[BOTTOM]
            -- aux[LEFT]{up}
            .. aux[L_ARC]
            .. aux[JOINT]{down}
         &  aux[JOINT]{up}
            .. aux[R_ARC]
            .. aux[RIGHT]{down}
            -- _m_[END];
       draw _m_[MID] -- aux[JOINT];
    setbounds currentpicture to boundingpath;
    endfig;
endfor

%
% :
%

colon[TOP]    := (0,0.7u);
colon[BOTTOM] := (0,0.15u);

aux[TOP] := (0,0.475u);
aux[BOTTOM] := (0,0.375u);

start := transition(":",":");
beginfig(start);
   draw_grid(u);
   pickup pc;
   
   draw colon[TOP];
   draw colon[BOTTOM];
   setbounds currentpicture to boundingpath;
endfig;

%
% : -> :
%
for i = start+1 upto start+fpht:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start)/fpht;
       m := retarded(f);
       
       draw m[colon[TOP],aux[TOP]];
       draw m[colon[BOTTOM],aux[BOTTOM]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

for i = start+fpht+1 upto start+2fpht-1:
    beginfig(i);
       draw_grid(u);
       pickup pc;

       f := (i-start-fpht)/fpht;
       m := advanced(f);
       
       draw m[aux[TOP],colon[TOP]];
       draw m[aux[BOTTOM],colon[BOTTOM]];
       setbounds currentpicture to boundingpath;
    endfig;
endfor

end;
