%
% digits
%
% die Bilder werden in der Form digit.xnn erzeugt,
% wobei x von 0 bis 9 läuft und nn von 00 bis 59.
%
% von 01 bis 30 Veränderung der alten Form, von 31 bis 59
% Veränderung zur neuen, bei 00 dann neue Form
%

outputtemplate := "%j-%c.mps";

numeric f;   % [f]rame index
numeric m;   % [m]orph factor
numeric t;   % [t]ension
numeric phi; % rotation angle [phi]
numeric u;   % [u]nit
u := 5cm;
numeric q;   % [q]adratic,"[q]ubic", or [q]artic factor
pair C;      % [C]enter of rotation
C := (0,0.425u);
pen pc;      % [p]en[c]ircle
pc := pencircle scaled 0.1u;
path tmppath;
numeric tmp[];
pair aux[];

% symbolic variables
numeric LEFT, RIGHT, TOP, BOTTOM;
numeric BEGIN, END, JOINT, MID;
numeric L_ARC, R_ARC, U_ARC, D_ARC;
LEFT = 100;
RIGHT = 101;
TOP = 102;
BOTTOM = 103;
BEGIN = 104;
END = 105;
JOINT = 106;
MID = 107;
L_ARC = 108;
R_ARC = 109;
U_ARC = 110; % upper arc or upper part of arc
D_ARC = 111;

pair zero[], one[],   two[], three[], four[];
pair five[], six[], seven[], eight[], nine[];

%
% TODO:
%
% * Geschwindigkeit der Übergänge: langsam von der Ziffer weg, schnell zur nächsten hin
%   (eventuell nicht immer bei n30/n31?)


def draw_grid(expr u) =
    draw (-0.6u,-u) -- (-0.6u,1.7u) -- (0.6u,1.7u) -- (0.6u,-u) -- cycle;
    draw (-0.6u,0) -- (0.6u,0);
    draw (-0.6u,0.85u) -- (0.6u,0.85u);
    draw (-0.25u,-u)--(-0.25u,1.7u);
    draw (0.25u,-u)--(0.25u,1.7u);
enddef;

vardef accel(expr xx) = sqrt xx enddef;

vardef decel(expr xx) = xx*xx enddef;

vardef morph(expr xx) = 1/2 - 1/2*cosd(180*xx) enddef;

%
% Null
%
zero[TOP]    = (0,0.85u);
zero[BOTTOM] = (0,0);
zero[LEFT]   = (-0.25u,0.425u);
zero[RIGHT]  = zero[LEFT] xscaled -1;

beginfig(000);
   draw_grid(u);
   pickup pc;

   draw zero[TOP]
        .. zero[RIGHT]
        .. zero[BOTTOM]
        .. zero[LEFT]
        .. cycle;
endfig;

%
% Null -> Eins
%
one[BEGIN]  = (-0.25u,0.55u);
one[TOP]    = zero[TOP];
one[BOTTOM] = zero[BOTTOM];

for i = 001 upto 029:
    % 29 statt 30, um einen Glitch bei i=30 zu vermeiden
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := i/30;
       m := f;
       
       draw zero[TOP]
            ... (m/2)[zero[RIGHT],zero[LEFT]]
            ... zero[BOTTOM]
            ... (m/2)[zero[LEFT],zero[RIGHT]]
            ... cycle;
    endfig;
endfor

for i = 030 upto 059:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-30)/30;
       m := decel(f);

       draw m[one[TOP],one[BEGIN]]
            -- one[TOP]
            -- one[BOTTOM];
    endfig;
endfor

%
% Eins
%
beginfig(100);
   draw_grid(u);
   pickup pc;

   draw one[BEGIN]
        -- one[TOP]
        -- one[BOTTOM];
endfig;

%
% Eins -> Zwei
%
two[BEGIN] = one[BEGIN];
two[TOP]   = one[TOP];
two[R_ARC] = (0.225u,0.55u);
two[JOINT] = (-0.25u,0);
two[END]   = (0.25u,0);

for i = 101 upto 130:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-100)/30;
       m := decel(f);

       draw one[BEGIN]
            -- m[one[TOP],two[R_ARC]]
            -- m[one[BOTTOM],two[JOINT]];
    endfig;
endfor

for i = 131 upto 159:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       
       f := (i-130)/30;
       m := f; %accel(f);
       t := 1/sqrt(sqrt(m)); % zur Vermeidung einer Spitze im Scheitel der 2
       
       aux[MID] := (1/2)[two[BEGIN],two[R_ARC]];
       aux[TOP] := m[aux[MID],two[TOP]];
       
       draw two[BEGIN]
            .. tension  t .. aux[TOP]
            .. tension  t .. two[R_ARC]
            .. tension 2t .. two[JOINT];
       draw two[JOINT]
            -- m[two[JOINT],two[END]];
    endfig;
endfor

%
% Zwei
%
beginfig(200);
   draw_grid(u);
   pickup pc;
   
   draw two[BEGIN]
        .. two[TOP]
        .. two[R_ARC]
        .. tension 2 .. two[JOINT];
   draw two[JOINT] -- two[END];
endfig;

%
% Zwei -> Drei
%
three[BEGIN] = (-0.25u,0.65u);
three[TOP]   = two[TOP];
three[U_ARC] = (0.25u,0.5u);
three[JOINT] = (-0.15u,0);
three[D_ARC] = (0.3u,-0.625u);
three[END]   = three[D_ARC] xscaled -1;

for i = 201 upto 230:
    beginfig(i);
       draw_grid(u);
       pickup pc;         
       f := (i-200)/30;
       m := decel(f);
       phi := -90m;

       draw two[BEGIN]
            .. two[TOP]
            .. two[R_ARC]
            .. tension 2 .. two[JOINT];
       draw two[JOINT]
            -- two[END] rotatedaround (two[JOINT],phi);
    endfig;
endfor

for i = 231 upto 259:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-230)/30;
       m := decel(f);
       t := 1/m;

       aux[END] := two[END] rotatedabout (two[JOINT],-90);

       draw m[two[BEGIN],three[BEGIN]]
            .. three[TOP]
            .. m[two[R_ARC],three[U_ARC]]
            .. tension (2-m) .. m[two[JOINT],three[JOINT]];
       draw m[two[JOINT],three[JOINT]]
            .. m[two[JOINT],three[D_ARC]]
            .. m[aux[END],three[END]];
    endfig;
endfor

%
% Drei
%
beginfig(300);
   draw_grid(u);
   pickup pc;

   draw three[BEGIN]
        .. three[TOP]
        .. three[U_ARC]
        .. three[JOINT];
   draw three[JOINT]
        .. three[D_ARC]
        .. three[END];
endfig;

%
% Drei -> Vier
%
four[LEFT]   = (-0.25u,0);
four[TOP]    = (0.25u,0.85u);
four[MID]    = four[LEFT] xscaled -1;
four[BOTTOM] = (0.25u,-0.75u);
four[RIGHT]  = (0.4u,0);

for i = 301 upto 330:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       
       f := (i-300)/30;
       m := f;
       t := 15*f*f; if t < 1: t := 1 fi;

       % Der "Austrittswinkel" des unteren Bogens an der "Spitze"
       % wird ermittelt und wandert langsam gegen 0.
       tmppath := three[JOINT] .. three[D_ARC] .. three[END];
       aux0 := direction 0 of tmppath;

       phi := (1-m)*angle(aux0);

       draw m[three[BEGIN],four[LEFT]] 
            .. tension t .. m[three[TOP],four[TOP]]
            .. tension t .. m[three[U_ARC],four[MID]]
            .. tension t .. three[JOINT];
       draw three[JOINT]{dir phi}
            .. three[D_ARC]
            .. three[END];
    endfig;
endfor

for i = 331 upto 359:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       
       f := (i-330)/30;
       m := f;
       t := 15*f*f*f; if t < 1: t := 1 fi;

       draw four[LEFT]
            -- four[TOP]
            -- four[MID]
            -- m[three[JOINT],four[LEFT]]{right}
            .. tension t .. m[three[D_ARC],four[MID]]
            .. tension t .. m[three[END],four[BOTTOM]];
       draw four[MID]
            -- m[four[MID],four[RIGHT]];
    endfig;
endfor

%
% Vier
%
beginfig(400);
   draw_grid(u);
   pickup pc;
   
   draw four[RIGHT]
        -- four[LEFT]
        -- four[TOP]
        -- four[BOTTOM];
endfig;

%
% Vier -> Fünf
%
five[BEGIN] = four[TOP];
five[LEFT]  = five[BEGIN] xscaled -1;
five[JOINT] = four[LEFT];
five[U_ARC] = (0,0.1u);
five[R_ARC] = (0.3u,-0.425u);
five[END]   = (-0.3u,-0.75u);
   
for i = 401 upto 430:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-400)/30;
       m := f;

       draw four[TOP]
            -- four[LEFT]
            -- m[four[RIGHT],four[MID]];
       draw m[four[TOP],four[MID]]
            -- four[BOTTOM];
    endfig;
endfor

for i = 431 upto 459:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-430)/30;
       t := 5-5*f; if t < 1: t := 1 fi;
       m := accel(f);

       draw five[BEGIN]
            -- m[four[TOP],five[LEFT]]
            -- five[JOINT]
            .. tension t .. m[four[MID],five[U_ARC]]
            .. tension 1 .. m[four[MID],five[R_ARC]]
            .. tension t .. if i>454: {left} fi m[four[BOTTOM],five[END]];
       %TODO: if-Anweisung durch Winkelberechnung glätten
    endfig;
endfor    

%
% Fünf
%
beginfig(500);
   draw_grid(u);
   pickup pc;

   draw five[BEGIN]
        -- five[LEFT]
        -- five[JOINT]
        .. five[U_ARC]
        .. five[R_ARC]
        .. {left}five[END];
endfig;

%
% Fünf -> Sechs
%
six[BEGIN]  = (0.25u,1.5u);
six[LEFT]   = zero[LEFT] xscaled 3/2;
six[RIGHT]  = zero[RIGHT] xscaled 3/2;
six[TOP]    = zero[TOP];
six[BOTTOM] = zero[BOTTOM];
   
for i = 501 upto 530:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-500)/30;
       m := f;

       % die linke Ecke five[LEFT] wandert genauso schnell nach oben wie
       % five[BEGIN], aber die x-Koordinate bleibt unverändert:
       
       aux[LEFT] := (xpart(five[LEFT]),ypart(m[five[BEGIN],six[BEGIN]]));
       
       draw m[five[BEGIN],six[BEGIN]]
            -- aux[LEFT]
            -- m[five[JOINT],six[LEFT]];
       draw m[five[JOINT],six[LEFT]]
            .. m[five[U_ARC],six[TOP]]
            .. m[five[R_ARC],six[RIGHT]]
            .. {left}m[five[END],six[BOTTOM]]
            .. if i < 530:
                  m[five[END],six[LEFT]]
               else:
                  cycle
               fi;
    endfig;
endfor

for i = 531 upto 559:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-530)/30;
       t := 1/f;
       m := f;
            
       % wir ermitteln den Punkt, der auf 2/3 des gedachten Bogens liegt;
       % aux1 wandert von der linken Ecke der verschobenen "5" zum Zielpunkt.
       % Weil er dann auf dem Bogen liegt, kann er bei der "6" einfach
       % weggelassen weden.
       
       tmppath := six[LEFT]{up} .. six[BEGIN];
       aux[END] := point 2/3 of tmppath;
       aux[BEGIN] := (xpart(six[LEFT]),ypart(six[BEGIN]));
       aux[MID] := m[aux[BEGIN],aux[END]];
       
       draw six[LEFT]{up}
            .. tension t .. aux[MID]
            .. tension t .. six[BEGIN];
       draw six[TOP]
            .. six[RIGHT]
            .. six[BOTTOM]
            .. six[LEFT]
            .. cycle;
    endfig;
endfor

%
% Sechs
%
beginfig(600);
   draw_grid(u);
   pickup pc;
   
   % der Abstand vom Zentrum zur Schwungspitze in y-Richtung
   % ist bei der Sechs mit 1.5-0.425=1.075 geringer
   % als bei der Neun: 0.425-(-0.75)=1.175
   
   draw six[TOP]
        .. six[RIGHT]
        .. six[BOTTOM]
        .. six[LEFT]
        .. cycle;
   draw six[LEFT]{up} .. six[BEGIN];
endfig;

%
% Sechs -> Sieben (1/2)
%

seven[BEGIN] = (-0.3u,0.75u);
seven[LEFT]  = (-0.3u,0.85u);
seven[JOINT] = seven[LEFT] xscaled -1;
seven[MID]   = (0.1u,0.15u);
seven[END]   = (0,-0.75u);

for i = 601 upto 630:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-600)/30;
       m := f;
       q := 3*m*m-3*m+1;
         % Parabelabschnitt y = 1 .. 1/4 .. 1 für x = 0 .. 0.5 .. 1;
       phi := 180m;
       
       z13 = (-0.375u,0.425u) rotatedaround (C,phi); % war z23
       z1 = (0.25u,(1q + 0.5)*u) rotatedaround (C,phi);
       z32 = (0.375u,0.425u) rotatedaround (C,phi/2);
       z2 = (0,0.85u) rotatedaround (C,phi/4);
       z3 = (0,(0+0.0m)*u) rotatedaround (C,3phi/4);
       z23 = ((-0.375+0.125m)*u,(0.425+0.075m)*u);
       % Nach der Rotation gilt:
       % z1'=(-0.25u,-0.65u);
       % z13'=(0.375u,0.425u);
       % z32'=(0,0.8u);
       % z2'=(-0.3,0.725); weil 0.425/sqrt(2)=0.30!
       % z3'=(0.3,0.725);
       
       draw z1 .. z13{dir (phi-90)} .. z3 ... z32  ... z2 ... z23; 
    endfig;
endfor

%
% Sechs -> Sieben (2/2)
%
for i = 631 upto 659:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-630)/30;
       t := 30 * f * f; if t < 1: t :=1 fi;
              
       z1 = (0.3u,(0.725+0.125f)*u); % war z3
       z21 = ((0.375-0.275f)*u,(0.425-0.275f)*u); % war z13
       z2 = ((-0.25+0.25f)*u,(-0.65-0.1f)*u); % war z1
       z13 = (-0.3u,(0.725+0.125f)*u); % war z2
       z3 = ((-0.25-0.05f)*u,(0.5+0.25f)*u); % war z23
       z32= (0,(0.8+0.05f)*u); % liegt dann genau zwischen neu z1 und z13 und fällt dann weg
       
       % Der Tangentenwinkel an z1↓ beträgt näherungsweise 135° und soll auf 90°=up verkürzt werden
       draw z2 .. z21 .. z1{dir (135-45f)} .. tension t .. z32{dir 180} .. tension t .. z13 .. tension t .. z3;
    endfig;
endfor

%
% Sieben
%
beginfig(700);
   draw_grid(u);
   pickup pc;
   
   draw seven[BEGIN]
        -- seven[LEFT]
        -- seven[JOINT]{down}
        .. seven[MID]
        .. seven[END];
endfig;

%
% Sieben -> Acht
%
eight[MID]    = (0,0.85u);
eight[L_ARC]  = (-0.3u,1.25u);
eight[R_ARC]  = eight[L_ARC] xscaled -1;
eight[LEFT]   = (-0.4u,0.35u);
eight[RIGHT]  = eight[LEFT] xscaled -1;
eight[BOTTOM] = zero[BOTTOM];

for i = 701 upto 730:
    beginfig(i);  
       draw_grid(u);
       pickup pc;
       f := (i-700)/30;
       m := f;
       
       tmppath := m[seven[BEGIN],seven[LEFT]]
                  -- seven[LEFT]
                  -- seven[JOINT]{down}
                  .. seven[MID]
                  .. seven[END];
       
       aux[MID]   := ((-infinity,0)--(infinity,0)) intersectionpoint tmppath;
       aux[LEFT]  := aux[MID] - (0.15u,0);
       aux[RIGHT] := aux[MID] + (0.15u,0);
       
       draw tmppath;
       draw m[aux[MID],aux[LEFT]] -- m[aux[MID],aux[RIGHT]];
    endfig;
endfor

for i = 731 upto 759:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-730)/30;
       m := decel( f);
       t := 1/f; 
       tt := t/2; if tt < 1: tt := 1 fi;
     
       draw m[seven[END],eight[RIGHT]]
            .. m[seven[MID],eight[LEFT]]
            .. m[seven[JOINT],eight[R_ARC]]{up}
            .. tension t .. m[seven[LEFT],eight[L_ARC]];
       draw m[aux[LEFT],eight[L_ARC]]{down}
            .. tension tt .. m[aux[MID],eight[MID]]
            .. tension tt .. {down}m[aux[RIGHT],eight[RIGHT]];
    endfig;
endfor

%
% Acht
%
beginfig(800);
   draw_grid(u);
   pickup pc;
   
   draw eight[R_ARC]
        .. eight[MID]
        .. eight[LEFT]
        .. eight[BOTTOM]
        .. eight[RIGHT]
        .. eight[MID]
        .. eight[L_ARC]
        .. cycle;
endfig;

%
% Acht -> Neun
%
nine[TOP]    = six[TOP];
nine[LEFT]   = six[LEFT];
nine[RIGHT]  = six[RIGHT];
nine[BOTTOM] = six[BOTTOM];
nine[END]    = (-0.25u,-0.75u);

for i = 801 upto 830:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-800)/30;
       m := f;
       phi := -90m*m;
       
       % Die Acht kippt um 90° nach rechts, aus eight[MID] wird nine[RIGHT] etc.
       % Um zu skalieren, drehen wir daher nine[RIGHT|LEFT|TOP|BOTTOM] um 90° nach links:
       
       aux[MID]    := nine[RIGHT]  rotatedabout (C,90);
       aux[BOTTOM] := nine[LEFT]   rotatedabout (C,90);
       aux[LEFT]   := nine[TOP]    rotatedabout (C,90);
       aux[RIGHT]  := nine[BOTTOM] rotatedabout (C,90);
      
       % Wir ändern die Punktreihenfolge, um bei i=830 eine geschlossene Schleife
       % zu bekommen:
    
       tmppath := m[eight[LEFT],aux[LEFT]]
                  .. m[eight[BOTTOM],aux[BOTTOM]]
                  .. m[eight[RIGHT],aux[RIGHT]]
                  .. m[eight[MID],aux[MID]]
                  if i < 830:
                     .. m[eight[L_ARC],aux[MID]]
                     .. m[eight[R_ARC],aux[MID]]
                     .. m[eight[MID],aux[MID]]
                  fi
                  .. cycle;

       draw tmppath rotatedabout (C,phi);
    endfig;
endfor

for i = 831 upto 859:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-830)/30;
       m := accel(f);
              
       % Der Endpunkt des Bogens wandert von nine[RIGHT] ausgehend am
       % tatsächlichen Bogen entlang:
              
       tmppath := nine[RIGHT]{down} .. nine[END];
       aux[END] := point m of tmppath;
       
       draw nine[TOP]
            .. nine[RIGHT]
            .. nine[BOTTOM]
            .. nine[LEFT]
            .. cycle;
       draw nine[RIGHT]{down} .. aux[END];
    endfig;
endfor


%
% Neun
%
beginfig(900);
   draw_grid(u);
   pickup pc;

   draw nine[TOP]
        .. nine[RIGHT]
        .. nine[BOTTOM]
        .. nine[LEFT]
        .. cycle;
   draw nine[RIGHT]{down} .. nine[END];
endfig;

%
% Neun -> Null
%
for i = 901 upto 930:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-900)/30;
       m := decel(f);

       % Der Bogen der Neun soll beim Aufwickeln ein bisschen nach links gestreckt werden:

       q := -2*m*m+2m+1; % durchläuft 1 .. 3/2 .. 1 für x = 0 .. 0.5 .. 1;
       aux[END] := m[nine[END],nine[LEFT]] xscaled q;

       % wir legen einen Hilfspunkt dort an, wo der untere Bogen die y-Achse schneidet.
       % steigt der y-Wert des Hilfspunktes über die Unterkante der geschlossenen
       % Schleife, wird als y-Koordinate die Unterkante der Schleife gewählt, um zu
       % verhindert, dass der Bogen beim "Aufwickeln" ins Innere der geschlossenen Schleife
       % ragt.
       
       tmppath := nine[RIGHT]{down} .. aux[END];
       aux0 := ((0,-infinity)--(0,infinity)) intersectionpoint tmppath;
       tmp0 := ypart(aux0);
       tmp1 := ypart(nine[BOTTOM]);
       aux[MID] := (0,min(tmp0,tmp1));

       draw nine[TOP]
            .. nine[RIGHT]
            .. nine[BOTTOM]
            .. nine[LEFT]
            .. cycle;
       draw nine[RIGHT]{down}
            .. aux[MID]
            .. aux[END];
    endfig;
endfor

for i = 931 upto 959:
    beginfig(i);
       draw_grid(u);
       pickup pc;
       f := (i-930)/30;
       m := accel(f);
       
       draw zero[TOP]
            .. m[nine[RIGHT],zero[RIGHT]]
            .. zero[BOTTOM]
            .. m[nine[LEFT],zero[LEFT]]
            .. cycle;
    endfig;
endfor

end;
